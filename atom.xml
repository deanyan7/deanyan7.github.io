<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>冷颜の‘s blog</title>
  <subtitle>There is no substitute to hard work, first in, first out</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-08-21T02:59:21.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>冷颜の</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>pandas缺失数据处理</title>
    <link href="http://yoursite.com/2017/08/21/pandas%E7%BC%BA%E5%A4%B1%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
    <id>http://yoursite.com/2017/08/21/pandas缺失数据处理/</id>
    <published>2017-08-21T02:39:48.000Z</published>
    <updated>2017-08-21T02:59:21.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span> matplotlib.pylab <span class="keyword">as</span> plt</div><div class="line"></div><div class="line"><span class="comment"># 定义数据</span></div><div class="line">dates = pd.date_range(<span class="string">'20170101'</span>, periods = <span class="number">6</span>)</div><div class="line">df = pd.DataFrame(np.arange(<span class="number">24</span>).reshape((<span class="number">6</span>, <span class="number">4</span>)), index = dates, columns = [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>])</div><div class="line"><span class="comment"># 假设缺少数据</span></div><div class="line">df.iloc[<span class="number">1</span>, <span class="number">1</span>] = np.nan</div><div class="line">df.iloc[<span class="number">2</span>, <span class="number">2</span>] = np.nan</div><div class="line">df.iloc[<span class="number">1</span>, <span class="number">3</span>] = np.nan</div><div class="line">df.iloc[<span class="number">4</span>] = np.nan</div><div class="line"><span class="keyword">print</span> df</div></pre></td></tr></table></figure>
<pre><code>               A     B     C     D
2017-01-01   0.0   1.0   2.0   3.0
2017-01-02   4.0   NaN   6.0   NaN
2017-01-03   8.0   9.0   NaN  11.0
2017-01-04  12.0  13.0  14.0  15.0
2017-01-05   NaN   NaN   NaN   NaN
2017-01-06  20.0  21.0  22.0  23.0
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 判断是否缺失数据</span></div><div class="line">df.isnull()</div></pre></td></tr></table></figure>
<a id="more"></a>
<p><img src="http://upload-images.jianshu.io/upload_images/1767523-0eb1acfba7f45106.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="99D50414-4497-45CE-80F1-456FDECBB8D4.png"></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 查看数据信息情况</span></div><div class="line">df.info()</div></pre></td></tr></table></figure>
<pre><code>&lt;class &apos;pandas.core.frame.DataFrame&apos;&gt;
DatetimeIndex: 6 entries, 2017-01-01 to 2017-01-06
Freq: D
Data columns (total 4 columns):
A    5 non-null float64
B    4 non-null float64
C    4 non-null float64
D    4 non-null float64
dtypes: float64(4)
memory usage: 240.0 bytes
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 判断是否存在缺失数据的情况</span></div><div class="line">np.any(df.isnull() == <span class="keyword">True</span>)</div></pre></td></tr></table></figure>
<pre><code>True
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 按行或者按列来舍弃数据, how = all or any, any是默认值</span></div><div class="line">df.dropna(axis = <span class="number">0</span>, how = <span class="string">'any'</span>)</div><div class="line">df.dropna(axis = <span class="number">0</span>, how = <span class="string">'all'</span>)</div></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/1767523-b64b32c726558bcd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="31FB5CFF-E902-4DCE-A966-8AC1BAC9DB12.png"></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 填充数据</span></div><div class="line">df.fillna(value = <span class="number">0</span>)</div></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/1767523-013cd8b39a0d0101.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="DA6C6076-5917-4F08-950F-E47AC164A70F.png"></p>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; pandas &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; pd&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; np&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; matplotlib.pylab &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; plt&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 定义数据&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;dates = pd.date_range(&lt;span class=&quot;string&quot;&gt;&#39;20170101&#39;&lt;/span&gt;, periods = &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;df = pd.DataFrame(np.arange(&lt;span class=&quot;number&quot;&gt;24&lt;/span&gt;).reshape((&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;)), index = dates, columns = [&lt;span class=&quot;string&quot;&gt;&#39;A&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;B&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;C&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;D&#39;&lt;/span&gt;])&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 假设缺少数据&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;df.iloc[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] = np.nan&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;df.iloc[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;] = np.nan&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;df.iloc[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;] = np.nan&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;df.iloc[&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;] = np.nan&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; df&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;pre&gt;&lt;code&gt;               A     B     C     D
2017-01-01   0.0   1.0   2.0   3.0
2017-01-02   4.0   NaN   6.0   NaN
2017-01-03   8.0   9.0   NaN  11.0
2017-01-04  12.0  13.0  14.0  15.0
2017-01-05   NaN   NaN   NaN   NaN
2017-01-06  20.0  21.0  22.0  23.0
&lt;/code&gt;&lt;/pre&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 判断是否缺失数据&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;df.isnull()&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>matplotlib绘制图形</title>
    <link href="http://yoursite.com/2017/08/21/matplotlib.pylab/matplotlib%E7%BB%98%E5%88%B6%E5%9B%BE%E5%BD%A2/"/>
    <id>http://yoursite.com/2017/08/21/matplotlib.pylab/matplotlib绘制图形/</id>
    <published>2017-08-21T02:10:49.000Z</published>
    <updated>2017-08-21T02:33:34.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> matplotlib.pylab <span class="keyword">as</span> plt</div><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div></pre></td></tr></table></figure>
<h3 id="绘制图形"><a href="#绘制图形" class="headerlink" title="绘制图形"></a>绘制图形</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">x = np.linspace(-np.pi, np.pi, <span class="number">256</span>, endpoint = <span class="keyword">True</span>)</div><div class="line">C, S = np.cos(x), np.sin(x)</div><div class="line"></div><div class="line">%pylab inline</div><div class="line">plt.plot(x, C)</div><div class="line">plt.plot(x, S)</div></pre></td></tr></table></figure>
<pre><code>Populating the interactive namespace from numpy and matplotlib
[&lt;matplotlib.lines.Line2D at 0x11bb9b710&gt;]
</code></pre><p><img src="http://upload-images.jianshu.io/upload_images/1767523-ddb521c986d37a12.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="output_1_2.png"><br><a id="more"></a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 创建一个 8 * 6 点（point）的图，并设置分辨率为 80</span></div><div class="line">plt.figure(figsize=(<span class="number">8</span>,<span class="number">4</span>), dpi=<span class="number">80</span>)</div><div class="line"></div><div class="line"><span class="comment"># 创建一个新的 1 * 1 的子图，接下来的图样绘制在其中的第 1 块（也是唯一的一块）</span></div><div class="line">plt.subplot(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>)</div><div class="line"></div><div class="line">X = np.linspace(-np.pi, np.pi, <span class="number">256</span>,endpoint=<span class="keyword">True</span>)</div><div class="line">C,S = np.cos(X), np.sin(X)</div><div class="line"></div><div class="line"><span class="comment"># 绘制余弦曲线，使用蓝色的、连续的、宽度为 1 （像素）的线条</span></div><div class="line">plt.plot(X, C, color=<span class="string">"blue"</span>, linewidth=<span class="number">1.0</span>, linestyle=<span class="string">"-"</span>)</div><div class="line"></div><div class="line"><span class="comment"># 绘制正弦曲线，使用绿色的、连续的、宽度为 1 （像素）的线条</span></div><div class="line">plt.plot(X, S, color=<span class="string">"green"</span>, linewidth=<span class="number">1.0</span>, linestyle=<span class="string">"-"</span>)</div><div class="line"></div><div class="line"><span class="comment"># 设置横轴的上下限</span></div><div class="line">plt.xlim(<span class="number">-4.0</span>,<span class="number">4.0</span>)</div><div class="line"></div><div class="line"><span class="comment"># 设置横轴记号</span></div><div class="line">xticks(np.linspace(<span class="number">-4</span>,<span class="number">4</span>,<span class="number">9</span>,endpoint=<span class="keyword">True</span>))</div><div class="line"></div><div class="line"><span class="comment"># 设置纵轴的上下限</span></div><div class="line">plt.ylim(<span class="number">-1.0</span>,<span class="number">1.0</span>)</div><div class="line"></div><div class="line"><span class="comment"># 设置纵轴记号</span></div><div class="line">plt.yticks(np.linspace(<span class="number">-1</span>,<span class="number">1</span>,<span class="number">5</span>,endpoint=<span class="keyword">True</span>))</div></pre></td></tr></table></figure></p>
<pre><code>([&lt;matplotlib.axis.YTick at 0x11bebf410&gt;,
  &lt;matplotlib.axis.YTick at 0x11bca2e50&gt;,
  &lt;matplotlib.axis.YTick at 0x11bf63f50&gt;,
  &lt;matplotlib.axis.YTick at 0x11bf524d0&gt;,
  &lt;matplotlib.axis.YTick at 0x11bf529d0&gt;],
 &lt;a list of 5 Text yticklabel objects&gt;)
</code></pre><p><img src="http://upload-images.jianshu.io/upload_images/1767523-7a38bccc9da98d9f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="output_2_1.png"></p>
<h3 id="改变线条的颜色和粗细"><a href="#改变线条的颜色和粗细" class="headerlink" title="改变线条的颜色和粗细"></a>改变线条的颜色和粗细</h3><p>首先，我们以蓝色和红色分别表示余弦和正弦函数，而后将线条变粗一点。接下来，我们在水平方向拉伸一下整个图。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">%pylab inline</div><div class="line">figure(figsize=(<span class="number">10</span>,<span class="number">6</span>), dpi=<span class="number">80</span>)</div><div class="line">plot(X, C, color=<span class="string">"blue"</span>, linewidth=<span class="number">2.5</span>, linestyle=<span class="string">"-"</span>)</div><div class="line">plot(X, S, color=<span class="string">"red"</span>,  linewidth=<span class="number">2.5</span>, linestyle=<span class="string">"-"</span>)</div></pre></td></tr></table></figure>
<pre><code>Populating the interactive namespace from numpy and matplotlib

[&lt;matplotlib.lines.Line2D at 0x11bdea310&gt;]
</code></pre><p><img src="http://upload-images.jianshu.io/upload_images/1767523-44fbfcbe70cdc1a7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="output_4_2.png"></p>
<h3 id="设置图片边界"><a href="#设置图片边界" class="headerlink" title="设置图片边界"></a>设置图片边界</h3><p>当前的图片边界设置得不好，所以有些地方看得不是很清楚。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">%pylab inline</div><div class="line">figure(figsize=(<span class="number">10</span>,<span class="number">6</span>), dpi=<span class="number">80</span>)</div><div class="line">plot(x, C, color=<span class="string">"blue"</span>, linewidth=<span class="number">2.5</span>, linestyle=<span class="string">"-"</span>)</div><div class="line">plot(x, S, color=<span class="string">"red"</span>,  linewidth=<span class="number">2.5</span>, linestyle=<span class="string">"-"</span>)</div><div class="line"></div><div class="line"><span class="comment"># xlim(X.min()*1.1, X.max()*1.1)</span></div><div class="line"><span class="comment"># ylim(C.min()*1.1, C.max()*1.1)</span></div><div class="line">X, Y = C, S</div><div class="line">xmin ,xmax = X.min(), X.max()</div><div class="line">ymin, ymax = Y.min(), Y.max()</div><div class="line"></div><div class="line">dx = (xmax - xmin) * <span class="number">0.2</span></div><div class="line">dy = (ymax - ymin) * <span class="number">0.2</span></div><div class="line"></div><div class="line">xlim(xmin - dx, xmax + dx)</div><div class="line">ylim(ymin - dy, ymax + dy)</div></pre></td></tr></table></figure>
<pre><code>Populating the interactive namespace from numpy and matplotlib
(-1.3999734382882176, 1.3999734382882176)
</code></pre><p><img src="http://upload-images.jianshu.io/upload_images/1767523-87d74a7e4736a10f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="output_6_2.png"></p>
<h3 id="设置记号"><a href="#设置记号" class="headerlink" title="设置记号"></a>设置记号</h3><p>我们讨论正弦和余弦函数的时候，通常希望知道函数在 ±π±π 和 ±π2±π2 的值。这样看来，当前的设置就不那么理想了</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">%pylab inline</div><div class="line">figure(figsize=(<span class="number">10</span>,<span class="number">6</span>), dpi=<span class="number">80</span>)</div><div class="line">plot(x, C, color=<span class="string">"blue"</span>, linewidth=<span class="number">2.5</span>, linestyle=<span class="string">"-"</span>)</div><div class="line">plot(x, S, color=<span class="string">"red"</span>,  linewidth=<span class="number">2.5</span>, linestyle=<span class="string">"-"</span>)</div><div class="line"></div><div class="line">xticks( [-np.pi, -np.pi/<span class="number">2</span>, <span class="number">0</span>, np.pi/<span class="number">2</span>, np.pi])</div><div class="line">yticks([<span class="number">-1</span>, <span class="number">0</span>, +<span class="number">1</span>])</div></pre></td></tr></table></figure>
<pre><code>Populating the interactive namespace from numpy and matplotlib
([&lt;matplotlib.axis.YTick at 0x11c3d3cd0&gt;,
  &lt;matplotlib.axis.YTick at 0x11beb3d10&gt;,
  &lt;matplotlib.axis.YTick at 0x11c3e01d0&gt;],
 &lt;a list of 3 Text yticklabel objects&gt;)
</code></pre><p><img src="http://upload-images.jianshu.io/upload_images/1767523-54386ff9cc3505bd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="output_8_2.png"></p>
<h3 id="设置记号的标签"><a href="#设置记号的标签" class="headerlink" title="设置记号的标签"></a>设置记号的标签</h3><p>记号现在没问题了，不过标签却不大符合期望。我们可以把 3.1423.142 当做是 ππ，但毕竟不够精确。当我们设置记号的时候，我们可以同时设置记号的标签。注意这里使用了 LaTeX。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">%pylab inline</div><div class="line">figure(figsize=(<span class="number">10</span>,<span class="number">6</span>), dpi=<span class="number">80</span>)</div><div class="line">plot(x, C, color=<span class="string">"blue"</span>, linewidth=<span class="number">2.5</span>, linestyle=<span class="string">"-"</span>)</div><div class="line">plot(x, S, color=<span class="string">"red"</span>,  linewidth=<span class="number">2.5</span>, linestyle=<span class="string">"-"</span>)</div><div class="line"></div><div class="line"></div><div class="line">xticks([-np.pi, -np.pi/<span class="number">2</span>, <span class="number">0</span>, np.pi/<span class="number">2</span>, np.pi],</div><div class="line">       [<span class="string">r'$-\pi$'</span>, <span class="string">r'$-\pi/2$'</span>, <span class="string">r'$0$'</span>, <span class="string">r'$+\pi/2$'</span>, <span class="string">r'$+\pi$'</span>])</div><div class="line"></div><div class="line">yticks([<span class="number">-1</span>, <span class="number">0</span>, +<span class="number">1</span>],</div><div class="line">       [<span class="string">r'$-1$'</span>, <span class="string">r'$0$'</span>, <span class="string">r'$+1$'</span>])</div></pre></td></tr></table></figure>
<pre><code>Populating the interactive namespace from numpy and matplotlib
([&lt;matplotlib.axis.YTick at 0x11c42e790&gt;,
  &lt;matplotlib.axis.YTick at 0x11c42ebd0&gt;,
  &lt;matplotlib.axis.YTick at 0x11c58ea90&gt;],
 &lt;a list of 3 Text yticklabel objects&gt;)
</code></pre><p><img src="http://upload-images.jianshu.io/upload_images/1767523-cbd8b52191a94b61.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="output_10_2.png"></p>
<h3 id="移动脊柱"><a href="#移动脊柱" class="headerlink" title="移动脊柱"></a>移动脊柱</h3><p>坐标轴线和上面的记号连在一起就形成了脊柱（Spines，一条线段上有一系列的凸起，是不是很像脊柱骨啊~），它记录了数据区域的范围。它们可以放在任意位置，不过至今为止，我们都把它放在图的四边。</p>
<p>实际上每幅图有四条脊柱（上下左右），为了将脊柱放在图的中间，我们必须将其中的两条（上和右）设置为无色，然后调整剩下的两条到合适的位置——数据空间的 0 点。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">%pylab inline</div><div class="line">figure(figsize=(<span class="number">10</span>,<span class="number">6</span>), dpi=<span class="number">80</span>)</div><div class="line">plot(x, C, color=<span class="string">"blue"</span>, linewidth=<span class="number">2.5</span>, linestyle=<span class="string">"-"</span>)</div><div class="line">plot(x, S, color=<span class="string">"red"</span>,  linewidth=<span class="number">2.5</span>, linestyle=<span class="string">"-"</span>)</div><div class="line"></div><div class="line"></div><div class="line">xticks([-np.pi, -np.pi/<span class="number">2</span>, <span class="number">0</span>, np.pi/<span class="number">2</span>, np.pi],</div><div class="line">       [<span class="string">r'$-\pi$'</span>, <span class="string">r'$-\pi/2$'</span>, <span class="string">r'$0$'</span>, <span class="string">r'$+\pi/2$'</span>, <span class="string">r'$+\pi$'</span>])</div><div class="line"></div><div class="line">yticks([<span class="number">-1</span>, <span class="number">0</span>, +<span class="number">1</span>],</div><div class="line">       [<span class="string">r'$-1$'</span>, <span class="string">r'$0$'</span>, <span class="string">r'$+1$'</span>])</div><div class="line"></div><div class="line"></div><div class="line">ax = gca()</div><div class="line">ax.spines[<span class="string">'right'</span>].set_color(<span class="string">'none'</span>)</div><div class="line">ax.spines[<span class="string">'top'</span>].set_color(<span class="string">'none'</span>)</div><div class="line">ax.xaxis.set_ticks_position(<span class="string">'bottom'</span>)</div><div class="line">ax.spines[<span class="string">'bottom'</span>].set_position((<span class="string">'data'</span>,<span class="number">0</span>))</div><div class="line">ax.yaxis.set_ticks_position(<span class="string">'left'</span>)</div><div class="line">ax.spines[<span class="string">'left'</span>].set_position((<span class="string">'data'</span>,<span class="number">0</span>))</div></pre></td></tr></table></figure>
<pre><code>Populating the interactive namespace from numpy and matplotlib
</code></pre><p><img src="http://upload-images.jianshu.io/upload_images/1767523-60b9013d339387e7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="output_12_1.png"></p>
<h3 id="添加图例"><a href="#添加图例" class="headerlink" title="添加图例"></a>添加图例</h3><p>我们在图的左上角添加一个图例。为此，我们只需要在 plot 函数里以「键 - 值」的形式增加一个参数。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line">plot(x, C, color=<span class="string">"blue"</span>, linewidth=<span class="number">2.5</span>, linestyle=<span class="string">"-"</span>, label=<span class="string">"cosine"</span>)</div><div class="line">plot(x, S, color=<span class="string">"red"</span>,  linewidth=<span class="number">2.5</span>, linestyle=<span class="string">"-"</span>, label=<span class="string">"sine"</span>)</div><div class="line"></div><div class="line">legend(loc=<span class="string">'upper left'</span>)</div></pre></td></tr></table></figure>
<pre><code>&lt;matplotlib.legend.Legend at 0x11c9dbb50&gt;
</code></pre><p><img src="http://upload-images.jianshu.io/upload_images/1767523-84c0774955f44267.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="output_14_1.png"></p>
<h3 id="给一些特殊点做注释"><a href="#给一些特殊点做注释" class="headerlink" title="给一些特殊点做注释"></a>给一些特殊点做注释</h3><p>我们希望在 2π/3 2π/3 的位置给两条函数曲线加上一个注释。首先，我们在对应的函数图像位置上画一个点；然后，向横轴引一条垂线，以虚线标记；最后，写上标签</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">plot(x, C, color=<span class="string">"blue"</span>, linewidth=<span class="number">2.5</span>, linestyle=<span class="string">"-"</span>, label=<span class="string">"cosine"</span>)</div><div class="line">plot(x, S, color=<span class="string">"red"</span>,  linewidth=<span class="number">2.5</span>, linestyle=<span class="string">"-"</span>, label=<span class="string">"sine"</span>)</div><div class="line"></div><div class="line">t = <span class="number">2</span>*np.pi/<span class="number">3</span></div><div class="line">plot([t,t],[<span class="number">0</span>,np.cos(t)], color =<span class="string">'blue'</span>, linewidth=<span class="number">2.5</span>, linestyle=<span class="string">"--"</span>)</div><div class="line">scatter([t,],[np.cos(t),], <span class="number">50</span>, color =<span class="string">'blue'</span>)</div><div class="line"></div><div class="line">annotate(<span class="string">r'$\sin(\frac&#123;2\pi&#125;&#123;3&#125;)=\frac&#123;\sqrt&#123;3&#125;&#125;&#123;2&#125;$'</span>,</div><div class="line">         xy=(t, np.sin(t)), xycoords=<span class="string">'data'</span>,</div><div class="line">         xytext=(+<span class="number">10</span>, +<span class="number">30</span>), textcoords=<span class="string">'offset points'</span>, fontsize=<span class="number">16</span>,</div><div class="line">         arrowprops=dict(arrowstyle=<span class="string">"-&gt;"</span>, connectionstyle=<span class="string">"arc3,rad=.2"</span>))</div><div class="line"></div><div class="line">plot([t,t],[<span class="number">0</span>,np.sin(t)], color =<span class="string">'red'</span>, linewidth=<span class="number">2.5</span>, linestyle=<span class="string">"--"</span>)</div><div class="line">scatter([t,],[np.sin(t),], <span class="number">50</span>, color =<span class="string">'red'</span>)</div><div class="line"></div><div class="line">annotate(<span class="string">r'$\cos(\frac&#123;2\pi&#125;&#123;3&#125;)=-\frac&#123;1&#125;&#123;2&#125;$'</span>,</div><div class="line">         xy=(t, np.cos(t)), xycoords=<span class="string">'data'</span>,</div><div class="line">         xytext=(<span class="number">-90</span>, <span class="number">-50</span>), textcoords=<span class="string">'offset points'</span>, fontsize=<span class="number">16</span>,</div><div class="line">         arrowprops=dict(arrowstyle=<span class="string">"-&gt;"</span>, connectionstyle=<span class="string">"arc3,rad=.2"</span>))</div></pre></td></tr></table></figure>
<pre><code>&lt;matplotlib.text.Annotation at 0x11cb85110&gt;
</code></pre><p><img src="http://upload-images.jianshu.io/upload_images/1767523-cff89aaa14aec865.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="output_16_1.png"></p>
<h3 id="精益求精"><a href="#精益求精" class="headerlink" title="精益求精"></a>精益求精</h3><p>坐标轴上的记号标签被曲线挡住了，作为强迫症患者（雾）这是不能忍的。我们可以把它们放大，然后添加一个白色的半透明底色。这样可以保证标签和曲线同时可见。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">%pylab inline</div><div class="line">figure(figsize=(<span class="number">10</span>,<span class="number">6</span>), dpi=<span class="number">80</span>)</div><div class="line">plot(x, C, color=<span class="string">"blue"</span>, linewidth=<span class="number">2.5</span>, linestyle=<span class="string">"-"</span>)</div><div class="line">plot(x, S, color=<span class="string">"red"</span>,  linewidth=<span class="number">2.5</span>, linestyle=<span class="string">"-"</span>)</div><div class="line"></div><div class="line"></div><div class="line">xticks([-np.pi, -np.pi/<span class="number">2</span>, <span class="number">0</span>, np.pi/<span class="number">2</span>, np.pi],</div><div class="line">       [<span class="string">r'$-\pi$'</span>, <span class="string">r'$-\pi/2$'</span>, <span class="string">r'$0$'</span>, <span class="string">r'$+\pi/2$'</span>, <span class="string">r'$+\pi$'</span>])</div><div class="line"></div><div class="line">yticks([<span class="number">-1</span>, <span class="number">0</span>, +<span class="number">1</span>],</div><div class="line">       [<span class="string">r'$-1$'</span>, <span class="string">r'$0$'</span>, <span class="string">r'$+1$'</span>])</div><div class="line"></div><div class="line"></div><div class="line">ax = gca()</div><div class="line">ax.spines[<span class="string">'right'</span>].set_color(<span class="string">'none'</span>)</div><div class="line">ax.spines[<span class="string">'top'</span>].set_color(<span class="string">'none'</span>)</div><div class="line">ax.xaxis.set_ticks_position(<span class="string">'bottom'</span>)</div><div class="line">ax.spines[<span class="string">'bottom'</span>].set_position((<span class="string">'data'</span>,<span class="number">0</span>))</div><div class="line">ax.yaxis.set_ticks_position(<span class="string">'left'</span>)</div><div class="line">ax.spines[<span class="string">'left'</span>].set_position((<span class="string">'data'</span>,<span class="number">0</span>))</div><div class="line"></div><div class="line"><span class="keyword">for</span> label <span class="keyword">in</span> ax.get_xticklabels() + ax.get_yticklabels():</div><div class="line">    label.set_fontsize(<span class="number">16</span>)</div><div class="line">    label.set_bbox(dict(facecolor=<span class="string">'white'</span>, edgecolor=<span class="string">'None'</span>, alpha=<span class="number">0.65</span> ))</div></pre></td></tr></table></figure>
<pre><code>Populating the interactive namespace from numpy and matplotlib
</code></pre><p><img src="http://upload-images.jianshu.io/upload_images/1767523-fb67450b06804e24.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="output_18_1.png"></p>
<h3 id="叠堆柱状图"><a href="#叠堆柱状图" class="headerlink" title="叠堆柱状图"></a>叠堆柱状图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">%pylab inline</div><div class="line">size = <span class="number">5</span></div><div class="line">x = np.arange(size)</div><div class="line">a = np.random.random(size)</div><div class="line">b = np.random.random(size)</div><div class="line"></div><div class="line">plt.bar(x, a, label = <span class="string">'a'</span>)</div><div class="line">plt.bar(x, b, bottom=a, label=<span class="string">'b'</span>)</div><div class="line">plt.legend()</div></pre></td></tr></table></figure>
<pre><code>Populating the interactive namespace from numpy and matplotlib

&lt;matplotlib.legend.Legend at 0x11dbdcc50&gt;
</code></pre><p><img src="http://upload-images.jianshu.io/upload_images/1767523-05f533da407d5981.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="output_19_2.png"></p>
<h3 id="并列柱形图"><a href="#并列柱形图" class="headerlink" title="并列柱形图"></a>并列柱形图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">c = np.random.random(size)</div><div class="line"></div><div class="line">total_width, n = <span class="number">0.8</span>, <span class="number">3</span></div><div class="line">width = total_width / n</div><div class="line">x = x - (total_width - width) / <span class="number">2</span></div><div class="line"></div><div class="line">plt.bar(x, a,  width=width, label=<span class="string">'a'</span>)</div><div class="line">plt.bar(x + width, b, width=width, label=<span class="string">'b'</span>)</div><div class="line">plt.bar(x + <span class="number">2</span> * width, c, width=width, label=<span class="string">'c'</span>)</div><div class="line">plt.legend()</div></pre></td></tr></table></figure>
<pre><code>&lt;matplotlib.legend.Legend at 0x11dd76350&gt;
</code></pre><p><img src="http://upload-images.jianshu.io/upload_images/1767523-f66be212087b1a09.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="output_20_1.png"></p>
<h3 id="正负条形图-竖直"><a href="#正负条形图-竖直" class="headerlink" title="正负条形图-竖直"></a>正负条形图-竖直</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 数据数目</span></div><div class="line">n = <span class="number">10</span></div><div class="line">x = np.arange(n)</div><div class="line"><span class="comment"># 生成数据, 均匀分布(0.5, 1.0)之间</span></div><div class="line">y1 = (<span class="number">1</span> - x / float(n)) * np.random.uniform(<span class="number">0.5</span>, <span class="number">1.0</span>, n)</div><div class="line">y2 = (<span class="number">1</span> - x / float(n)) * np.random.uniform(<span class="number">0.5</span>, <span class="number">1.0</span>, n)</div><div class="line"><span class="comment"># 绘制柱状图, 向上</span></div><div class="line">plt.bar(x, y1, facecolor = <span class="string">'blue'</span>, edgecolor = <span class="string">'white'</span>)</div><div class="line"><span class="comment"># 绘制柱状图, 向下</span></div><div class="line">plt.bar(x, -y2, facecolor = <span class="string">'green'</span>, edgecolor = <span class="string">'white'</span>)</div><div class="line">temp = zip(x, y2)</div><div class="line"><span class="comment"># 在柱状图上显示具体数值, ha水平对齐, va垂直对齐</span></div><div class="line"><span class="keyword">for</span> x, y <span class="keyword">in</span> zip(x, y1):</div><div class="line">    plt.text(x + <span class="number">0.05</span>, y + <span class="number">0.1</span>, <span class="string">'%.2f'</span> % y, ha = <span class="string">'center'</span>, va = <span class="string">'bottom'</span>)</div><div class="line"><span class="keyword">for</span> x, y <span class="keyword">in</span> temp:</div><div class="line">    plt.text(x + <span class="number">0.05</span>, -y - <span class="number">0.1</span>, <span class="string">'%.2f'</span> % y, ha = <span class="string">'center'</span>, va = <span class="string">'bottom'</span>)</div><div class="line"><span class="comment"># 设置坐标轴范围</span></div><div class="line">plt.xlim(<span class="number">-1</span>, n)</div><div class="line">plt.ylim(<span class="number">-1.5</span>, <span class="number">1.5</span>)</div><div class="line"><span class="comment"># 去除坐标轴</span></div><div class="line">plt.xticks(())</div><div class="line">plt.yticks(())</div><div class="line">plt.show()</div></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/1767523-d1dedf9bd5dbc5f1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="output_21_0.png"></p>
<h3 id="条形图"><a href="#条形图" class="headerlink" title="条形图"></a>条形图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">data = [<span class="number">5</span>, <span class="number">20</span>, <span class="number">15</span>, <span class="number">25</span>, <span class="number">10</span>]</div><div class="line"></div><div class="line">plt.barh(range(len(data)), data)</div><div class="line">plt.show()</div></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/1767523-a94eaa7dd0dcdc01.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="output_22_0.png"></p>
<h3 id="正负条形图-横向"><a href="#正负条形图-横向" class="headerlink" title="正负条形图-横向"></a>正负条形图-横向</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">a = np.array([<span class="number">5</span>, <span class="number">20</span>, <span class="number">15</span>, <span class="number">25</span>, <span class="number">10</span>])</div><div class="line">b = np.array([<span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>, <span class="number">15</span>, <span class="number">5</span>])</div><div class="line"></div><div class="line">plt.barh(range(len(a)), a)</div><div class="line">plt.barh(range(len(b)), -b)</div><div class="line">plt.show()</div></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/1767523-66d31e41eb0218bc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="output_23_0.png"></p>
<h3 id="直方图"><a href="#直方图" class="headerlink" title="直方图"></a>直方图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">x = np.random.randn(<span class="number">1000</span>)</div><div class="line">plt.hist(x, <span class="number">50</span>)</div><div class="line">plt.show()</div></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/1767523-6e7a24e7ef6fa779.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="output_24_0.png"></p>
<h3 id="使用子图"><a href="#使用子图" class="headerlink" title="使用子图"></a>使用子图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">x = np.linspace(<span class="number">0</span>, <span class="number">2</span> * np.pi, <span class="number">50</span>)</div><div class="line">plt.subplot(<span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>) <span class="comment"># （行，列，活跃区）</span></div><div class="line">plt.plot(x, np.sin(x), <span class="string">'r'</span>)</div><div class="line">plt.subplot(<span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>)</div><div class="line">plt.plot(x, np.cos(x), <span class="string">'g'</span>)</div><div class="line">plt.show()</div></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/1767523-648f15717b051677.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="output_25_0.png"></p>
<h3 id="简单的散点图"><a href="#简单的散点图" class="headerlink" title="简单的散点图"></a>简单的散点图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">x = np.linspace(<span class="number">0</span>, <span class="number">2</span> * np.pi, <span class="number">10</span>)</div><div class="line">y = np.sin(x)</div><div class="line">plt.scatter(x,y)</div><div class="line">plt.show()</div></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/1767523-9d6c0219106252e0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="output_26_0.png"></p>
<h3 id="彩色映射散点图"><a href="#彩色映射散点图" class="headerlink" title="彩色映射散点图"></a>彩色映射散点图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">x = np.random.rand(<span class="number">1000</span>)</div><div class="line">y = np.random.rand(<span class="number">1000</span>)</div><div class="line">size = np.random.rand(<span class="number">1000</span>) * <span class="number">50</span></div><div class="line">colour = np.random.rand(<span class="number">1000</span>)</div><div class="line">plt.scatter(x, y, size, colour)</div><div class="line">plt.colorbar()</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 不显示坐标轴的值</span></div><div class="line">plt.xticks(())</div><div class="line">plt.yticks(())</div><div class="line"></div><div class="line">plt.show()</div></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/1767523-6bc42476d9c5176f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="output_27_0.png"></p>
<h3 id="figure的使用"><a href="#figure的使用" class="headerlink" title="figure的使用"></a>figure的使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">x = np.linspace(<span class="number">-1</span>, <span class="number">1</span>, <span class="number">50</span>)</div><div class="line">y1 = <span class="number">2</span> * x + <span class="number">1</span></div><div class="line"></div><div class="line"><span class="comment"># figure 1</span></div><div class="line">plt.figure()</div><div class="line">plt.plot(x, y1)</div><div class="line"></div><div class="line"><span class="comment"># figure 2</span></div><div class="line">y2 = x**<span class="number">2</span></div><div class="line">plt.figure()</div><div class="line">plt.plot(x, y2)</div><div class="line"></div><div class="line"><span class="comment"># figure 3，指定figure的编号并指定figure的大小, 指定线的颜色, 宽度和类型</span></div><div class="line">y2 = x**<span class="number">2</span></div><div class="line">plt.figure(num = <span class="number">5</span>, figsize = (<span class="number">4</span>, <span class="number">4</span>))</div><div class="line">plt.plot(x, y1)</div><div class="line">plt.plot(x, y2, color = <span class="string">'red'</span>, linewidth = <span class="number">1.0</span>, linestyle = <span class="string">'--'</span>)</div><div class="line">plt.show()</div></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/1767523-a507ecd0e2713ad2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="output_28_0.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1767523-c1574f731584e2c8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="output_28_1.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1767523-59882e00411ea26f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="output_28_2.png"></p>
<h3 id="添加legend"><a href="#添加legend" class="headerlink" title="添加legend"></a>添加legend</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 绘制普通图像</span></div><div class="line">x = np.linspace(<span class="number">-1</span>, <span class="number">1</span>, <span class="number">50</span>)</div><div class="line">y1 = <span class="number">2</span> * x + <span class="number">1</span></div><div class="line">y2 = x**<span class="number">2</span></div><div class="line">plt.figure()</div><div class="line"><span class="comment"># 在绘制时设置lable, 逗号是必须的</span></div><div class="line">l1, = plt.plot(x, y1, label = <span class="string">'line'</span>)</div><div class="line">l2, = plt.plot(x, y2, label = <span class="string">'parabola'</span>, color = <span class="string">'red'</span>, linewidth = <span class="number">1.0</span>, linestyle = <span class="string">'--'</span>)</div><div class="line"><span class="comment"># 设置坐标轴的取值范围</span></div><div class="line">plt.xlim((<span class="number">-1</span>, <span class="number">1</span>))</div><div class="line">plt.ylim((<span class="number">0</span>, <span class="number">2</span>))</div><div class="line"><span class="comment"># 设置坐标轴的lable</span></div><div class="line">plt.xlabel(<span class="string">'X axis'</span>)</div><div class="line">plt.ylabel(<span class="string">'Y axis'</span>)</div><div class="line"><span class="comment"># 设置x坐标轴刻度, 原来为0.25, 修改后为0.5</span></div><div class="line">plt.xticks(np.linspace(<span class="number">-1</span>, <span class="number">1</span>, <span class="number">5</span>))</div><div class="line"><span class="comment"># 设置y坐标轴刻度及标签, $$是设置字体</span></div><div class="line">plt.yticks([<span class="number">0</span>, <span class="number">0.5</span>], [<span class="string">'$minimum$'</span>, <span class="string">'normal'</span>])</div><div class="line"><span class="comment"># 设置legend</span></div><div class="line">plt.legend(handles = [l1, l2,], labels = [<span class="string">'a'</span>, <span class="string">'b'</span>], loc = <span class="string">'best'</span>)</div><div class="line"><span class="comment"># plt.show()</span></div></pre></td></tr></table></figure>
<pre><code>&lt;matplotlib.legend.Legend at 0x11e002f90&gt;
</code></pre><p><img src="http://upload-images.jianshu.io/upload_images/1767523-53c5303c7c219f34.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="output_29_1.png"></p>
<h3 id="添加annotation"><a href="#添加annotation" class="headerlink" title="添加annotation"></a>添加annotation</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 绘制普通图像</span></div><div class="line">x = np.linspace(<span class="number">-3</span>, <span class="number">3</span>, <span class="number">50</span>)</div><div class="line">y = <span class="number">2</span> * x + <span class="number">1</span></div><div class="line">plt.figure()</div><div class="line">plt.plot(x, y)</div><div class="line"><span class="comment"># 将上、右边框去掉</span></div><div class="line">ax = plt.gca()</div><div class="line">ax.spines[<span class="string">'right'</span>].set_color(<span class="string">'none'</span>)</div><div class="line">ax.spines[<span class="string">'top'</span>].set_color(<span class="string">'none'</span>)</div><div class="line"><span class="comment"># 设置x轴的位置及数据在坐标轴上的位置</span></div><div class="line">ax.xaxis.set_ticks_position(<span class="string">'bottom'</span>)</div><div class="line">ax.spines[<span class="string">'bottom'</span>].set_position((<span class="string">'data'</span>, <span class="number">0</span>))</div><div class="line"><span class="comment"># 设置y轴的位置及数据在坐标轴上的位置</span></div><div class="line">ax.yaxis.set_ticks_position(<span class="string">'left'</span>)</div><div class="line">ax.spines[<span class="string">'left'</span>].set_position((<span class="string">'data'</span>, <span class="number">0</span>))</div><div class="line"><span class="comment"># 定义(x0, y0)点</span></div><div class="line">x0 = <span class="number">1</span></div><div class="line">y0 = <span class="number">2</span> * x0 + <span class="number">1</span></div><div class="line"><span class="comment"># 绘制(x0, y0)点</span></div><div class="line">plt.scatter(x0, y0, s = <span class="number">50</span>, color = <span class="string">'blue'</span>)</div><div class="line"><span class="comment"># 绘制虚线</span></div><div class="line">plt.plot([x0, x0], [y0, <span class="number">0</span>], <span class="string">'k--'</span>, lw = <span class="number">2.5</span>)</div><div class="line"><span class="comment"># 绘制注解一</span></div><div class="line">plt.annotate(<span class="string">r'$2 * x + 1 = %s$'</span> % y0, xy = (x0, y0), xycoords = <span class="string">'data'</span>, xytext = (+<span class="number">30</span>, <span class="number">-30</span>), \</div><div class="line">             textcoords = <span class="string">'offset points'</span>, fontsize = <span class="number">16</span>, arrowprops = dict(arrowstyle = <span class="string">'-&gt;'</span>, connectionstyle = <span class="string">'arc3, rad = .2'</span>))</div><div class="line"><span class="comment"># 绘制注解二</span></div><div class="line">plt.text(<span class="number">-3</span>, <span class="number">3</span>, <span class="string">r'$Test\ text. \mu \sigma_i, \alpha_i$'</span>, fontdict = &#123;<span class="string">'size'</span>: <span class="number">16</span>, <span class="string">'color'</span>: <span class="string">'red'</span>&#125;)</div><div class="line">plt.show()</div></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/1767523-60ceac4a1021b94c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="output_30_0.png"></p>
<h3 id="绘制等高线图"><a href="#绘制等高线图" class="headerlink" title="绘制等高线图"></a>绘制等高线图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 定义等高线高度函数</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x, y)</span>:</span></div><div class="line">    <span class="keyword">return</span> (<span class="number">1</span> - x / <span class="number">2</span> + x ** <span class="number">5</span> + y ** <span class="number">3</span>) * np.exp(- x ** <span class="number">2</span> - y ** <span class="number">2</span>)</div><div class="line"><span class="comment"># 数据数目</span></div><div class="line">n = <span class="number">256</span></div><div class="line"><span class="comment"># 定义x, y</span></div><div class="line">x = np.linspace(<span class="number">-3</span>, <span class="number">3</span>, n)</div><div class="line">y = np.linspace(<span class="number">-3</span>, <span class="number">3</span>, n)</div><div class="line"><span class="comment"># 生成网格数据</span></div><div class="line">X, Y = np.meshgrid(x, y)</div><div class="line"><span class="comment"># 填充等高线的颜色, 8是等高线分为几部分</span></div><div class="line">plt.contourf(X, Y, f(X, Y), <span class="number">8</span>, alpha = <span class="number">0.75</span>, cmap = plt.cm.hot)</div><div class="line"><span class="comment"># 绘制等高线</span></div><div class="line">C = plt.contour(X, Y, f(X, Y), <span class="number">8</span>, colors = <span class="string">'black'</span>, linewidth = <span class="number">0.5</span>)</div><div class="line"><span class="comment"># 绘制等高线数据</span></div><div class="line">plt.clabel(C, inline = <span class="keyword">True</span>, fontsize = <span class="number">10</span>)</div><div class="line"><span class="comment"># 去除坐标轴</span></div><div class="line">plt.xticks(())</div><div class="line">plt.yticks(())</div><div class="line">plt.show()</div></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/1767523-77d606503716818b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="output_31_0.png"></p>
<h3 id="绘制image"><a href="#绘制image" class="headerlink" title="绘制image"></a>绘制image</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 定义图像数据</span></div><div class="line">a = np.linspace(<span class="number">0</span>, <span class="number">1</span>, <span class="number">9</span>).reshape(<span class="number">3</span>, <span class="number">3</span>)</div><div class="line"><span class="comment"># 显示图像数据</span></div><div class="line">plt.imshow(a, interpolation = <span class="string">'nearest'</span>, cmap = <span class="string">'bone'</span>, origin = <span class="string">'lower'</span>)</div><div class="line"><span class="comment"># 添加颜色条</span></div><div class="line">plt.colorbar()</div><div class="line"><span class="comment"># 去掉坐标轴</span></div><div class="line">plt.xticks(())</div><div class="line">plt.yticks(())</div><div class="line">plt.show()</div></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/1767523-e108547eaf62a5cb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="output_32_0.png"></p>
<h3 id="绘制3D图"><a href="#绘制3D图" class="headerlink" title="绘制3D图"></a>绘制3D图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> mpl_toolkits.mplot3d <span class="keyword">import</span> Axes3D</div><div class="line"><span class="comment"># 定义figure</span></div><div class="line">fig = plt.figure()</div><div class="line"><span class="comment"># 将figure变为3d</span></div><div class="line">ax = Axes3D(fig)</div><div class="line"><span class="comment"># 数据数目</span></div><div class="line">n = <span class="number">256</span></div><div class="line"><span class="comment"># 定义x, y</span></div><div class="line">x = np.arange(<span class="number">-4</span>, <span class="number">4</span>, <span class="number">0.25</span>)</div><div class="line">y = np.arange(<span class="number">-4</span>, <span class="number">4</span>, <span class="number">0.25</span>)</div><div class="line"><span class="comment"># 生成网格数据</span></div><div class="line">X, Y = np.meshgrid(x, y)</div><div class="line"><span class="comment"># 计算每个点对的长度</span></div><div class="line">R = np.sqrt(X ** <span class="number">2</span> + Y ** <span class="number">2</span>)</div><div class="line"><span class="comment"># 计算Z轴的高度</span></div><div class="line">Z = np.sin(R)</div><div class="line"><span class="comment"># 绘制3D曲面</span></div><div class="line">ax.plot_surface(X, Y, Z, rstride = <span class="number">1</span>, cstride = <span class="number">1</span>, cmap = plt.get_cmap(<span class="string">'rainbow'</span>))</div><div class="line"><span class="comment"># 绘制从3D曲面到底部的投影</span></div><div class="line">ax.contour(X, Y, Z, zdim = <span class="string">'z'</span>, offset = <span class="number">-2</span>, cmap = <span class="string">'rainbow'</span>)</div><div class="line"><span class="comment"># 设置z轴的维度</span></div><div class="line">ax.set_zlim(<span class="number">-2</span>, <span class="number">2</span>)</div><div class="line">plt.show()</div></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/1767523-e5556712e2deabb7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="output_33_0.png"></p>
<h3 id="绘制多图"><a href="#绘制多图" class="headerlink" title="绘制多图"></a>绘制多图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">plt.figure()</div><div class="line"><span class="comment"># 绘制第一个图</span></div><div class="line">plt.subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>)</div><div class="line">plt.plot([<span class="number">0</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">1</span>])</div><div class="line"><span class="comment"># 绘制第二个图</span></div><div class="line">plt.subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>)</div><div class="line">plt.plot([<span class="number">0</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">1</span>])</div><div class="line"><span class="comment"># 绘制第三个图</span></div><div class="line">plt.subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>)</div><div class="line">plt.plot([<span class="number">0</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">1</span>])</div><div class="line"><span class="comment"># 绘制第四个图</span></div><div class="line">plt.subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>)</div><div class="line">plt.plot([<span class="number">0</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">1</span>])</div><div class="line">plt.show()</div></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/1767523-59c0ac50a1f677e1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="output_34_0.png"></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">plt.figure()</div><div class="line"><span class="comment"># 绘制第一个图</span></div><div class="line">plt.subplot(<span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>)</div><div class="line">plt.plot([<span class="number">0</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">1</span>])</div><div class="line"><span class="comment"># 绘制第二个图</span></div><div class="line">plt.subplot(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</div><div class="line">plt.plot([<span class="number">0</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">1</span>])</div><div class="line"><span class="comment"># 绘制第三个图</span></div><div class="line">plt.subplot(<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>)</div><div class="line">plt.plot([<span class="number">0</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">1</span>])</div><div class="line"><span class="comment"># 绘制第四个图</span></div><div class="line">plt.subplot(<span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>)</div><div class="line">plt.plot([<span class="number">0</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">1</span>])</div><div class="line">plt.show()</div></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/1767523-2836e7d1cc1fd7ef.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="output_35_0.png"></p>
<h3 id="figure的嵌套"><a href="#figure的嵌套" class="headerlink" title="figure的嵌套"></a>figure的嵌套</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># 定义figure</span></div><div class="line">fig = plt.figure()</div><div class="line"><span class="comment"># 定义数据</span></div><div class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</div><div class="line">y = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">6</span>]</div><div class="line"><span class="comment"># figure的百分比, 从figure 10%的位置开始绘制, 宽高是figure的80%</span></div><div class="line">left, bottom, width, height = <span class="number">0.1</span>, <span class="number">0.1</span>, <span class="number">0.8</span>, <span class="number">0.8</span></div><div class="line"><span class="comment"># 获得绘制的句柄</span></div><div class="line">ax1 = fig.add_axes([left, bottom, width, height])</div><div class="line"><span class="comment"># 绘制点(x,y)</span></div><div class="line">ax1.plot(x, y, <span class="string">'r'</span>)</div><div class="line">ax1.set_xlabel(<span class="string">'x'</span>)</div><div class="line">ax1.set_ylabel(<span class="string">'y'</span>)</div><div class="line">ax1.set_title(<span class="string">'test'</span>)</div><div class="line"><span class="comment"># 嵌套方法一</span></div><div class="line"><span class="comment"># figure的百分比, 从figure 10%的位置开始绘制, 宽高是figure的80%</span></div><div class="line">left, bottom, width, height = <span class="number">0.2</span>, <span class="number">0.6</span>, <span class="number">0.25</span>, <span class="number">0.25</span></div><div class="line"><span class="comment"># 获得绘制的句柄</span></div><div class="line">ax2 = fig.add_axes([left, bottom, width, height])</div><div class="line"><span class="comment"># 绘制点(x,y)</span></div><div class="line">ax2.plot(x, y, <span class="string">'r'</span>)</div><div class="line">ax2.set_xlabel(<span class="string">'x'</span>)</div><div class="line">ax2.set_ylabel(<span class="string">'y'</span>)</div><div class="line">ax2.set_title(<span class="string">'part1'</span>)</div><div class="line"><span class="comment"># 嵌套方法二</span></div><div class="line">plt.axes([bottom, left, width, height])</div><div class="line">plt.plot(x, y, <span class="string">'r'</span>)</div><div class="line">plt.xlabel(<span class="string">'x'</span>)</div><div class="line">plt.ylabel(<span class="string">'y'</span>)</div><div class="line">plt.title(<span class="string">'part2'</span>)</div><div class="line">plt.show()</div></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/1767523-6f769cf12df227d0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="output_36_0.png"></p>
<h3 id="主次坐标轴"><a href="#主次坐标轴" class="headerlink" title="主次坐标轴"></a>主次坐标轴</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 定义数据</span></div><div class="line">x = np.arange(<span class="number">0</span>, <span class="number">10</span>, <span class="number">0.1</span>)</div><div class="line">y1 = <span class="number">0.05</span> * x ** <span class="number">2</span></div><div class="line">y2 = <span class="number">-1</span> * y1</div><div class="line"><span class="comment"># 定义figure</span></div><div class="line">fig, ax1 = plt.subplots()</div><div class="line"><span class="comment"># 得到ax1的对称轴ax2</span></div><div class="line">ax2 = ax1.twinx()</div><div class="line"><span class="comment"># 绘制图像</span></div><div class="line">ax1.plot(x, y1, <span class="string">'g-'</span>)</div><div class="line">ax2.plot(x, y2, <span class="string">'b--'</span>)</div><div class="line"><span class="comment"># 设置label</span></div><div class="line">ax1.set_xlabel(<span class="string">'X data'</span>)</div><div class="line">ax1.set_ylabel(<span class="string">'Y 1'</span>, color = <span class="string">'g'</span>)</div><div class="line">ax2.set_ylabel(<span class="string">'Y 2'</span>, color = <span class="string">'b'</span>)</div><div class="line">plt.show()</div></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/1767523-cf26d021c5071b7d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="output_37_0.png"></p>
<h3 id="创建动画"><a href="#创建动画" class="headerlink" title="创建动画"></a>创建动画</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> animation</div><div class="line"><span class="comment"># 定义figure</span></div><div class="line">fig, ax = plt.subplots()</div><div class="line"><span class="comment"># 定义数据</span></div><div class="line">x = np.arange(<span class="number">0</span>, <span class="number">2</span> * np.pi, <span class="number">0.01</span>)</div><div class="line"><span class="comment"># line, 表示只取返回值中的第一个元素</span></div><div class="line">line, = ax.plot(x, np.sin(x))</div><div class="line"><span class="comment"># 定义动画的更新</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(i)</span>:</span></div><div class="line">    line.set_ydata(np.sin(x + i/<span class="number">10</span>))</div><div class="line">    <span class="keyword">return</span> line,</div><div class="line"><span class="comment"># 定义动画的初始值</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">init</span><span class="params">()</span>:</span></div><div class="line">    line.set_ydata(np.sin(x))</div><div class="line">    <span class="keyword">return</span> line,</div><div class="line"><span class="comment"># 创建动画</span></div><div class="line">ani = animation.FuncAnimation(fig = fig, func = update, init_func = init, interval = <span class="number">10</span>, blit = <span class="keyword">False</span>, frames = <span class="number">200</span>)</div><div class="line"><span class="comment"># 展示动画</span></div><div class="line">plt.show()</div><div class="line"><span class="comment"># 动画保存</span></div><div class="line">ani.save(<span class="string">'sin.gif'</span>, writer = <span class="string">'imagemagick'</span>, fps = <span class="number">30</span>, dpi = <span class="number">100</span>)</div></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/1767523-65496f736ffc0233.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="output_38_0.png"></p>
<h3 id="保存figure"><a href="#保存figure" class="headerlink" title="保存figure"></a>保存figure</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> matplotlib</div><div class="line">matplotlib.use(<span class="string">'Agg'</span>)</div><div class="line"><span class="comment"># 定义数据</span></div><div class="line">x = np.arange(<span class="number">0</span>, <span class="number">10</span>, <span class="number">0.1</span>)</div><div class="line">y = <span class="number">0.05</span> * x ** <span class="number">2</span></div><div class="line"><span class="comment">#绘制图像</span></div><div class="line">plt.plot(x, y)</div><div class="line"><span class="comment"># 设置坐标轴</span></div><div class="line">plt.xlabel(<span class="string">'x data'</span>)</div><div class="line">plt.ylabel(<span class="string">'y data'</span>)</div><div class="line"><span class="comment"># 默认保存为png格式</span></div><div class="line"></div><div class="line">plt.savefig(<span class="string">'test'</span>)</div></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/1767523-fa4c89e4dae40248.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="output_39_0.png"></p>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; matplotlib.pylab &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; plt&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; pandas &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; pd&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; np&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;绘制图形&quot;&gt;&lt;a href=&quot;#绘制图形&quot; class=&quot;headerlink&quot; title=&quot;绘制图形&quot;&gt;&lt;/a&gt;绘制图形&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;x = np.linspace(-np.pi, np.pi, &lt;span class=&quot;number&quot;&gt;256&lt;/span&gt;, endpoint = &lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;C, S = np.cos(x), np.sin(x)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;%pylab inline&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;plt.plot(x, C)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;plt.plot(x, S)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;pre&gt;&lt;code&gt;Populating the interactive namespace from numpy and matplotlib
[&amp;lt;matplotlib.lines.Line2D at 0x11bb9b710&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1767523-ddb521c986d37a12.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;output_1_2.png&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>资料整理</title>
    <link href="http://yoursite.com/2017/08/18/%E5%90%84%E7%B1%BB%E8%B5%84%E6%96%99%E6%95%B4%E7%90%86/"/>
    <id>http://yoursite.com/2017/08/18/各类资料整理/</id>
    <published>2017-08-18T06:18:15.000Z</published>
    <updated>2017-08-21T01:54:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h2><hr>
<h3 id="Objectice-C"><a href="#Objectice-C" class="headerlink" title="Objectice-C"></a>Objectice-C</h3><p><a href="http://www.jianshu.com/p/c8152d6ce957" target="_blank" rel="external">iOS常用第三方库</a><br><a href="https://juejin.im/post/5945187afe88c2006a74076a" target="_blank" rel="external">iOS Swift 面试&amp;工作-博主\博文</a><br><a href="http://www.jianshu.com/p/4daa99b73a1d" target="_blank" rel="external">iOS-UIApplication简介</a><br><a href="https://github.com/Tim9Liu9/TimLiu-iOS" target="_blank" rel="external">iOS开发常用三方库、插件、知名博客</a><br><a href="https://github.com/wg689/Solve-App-Store-Review-Problem#%E9%97%AE%E9%A2%98ipv6%E8%A2%AB%E6%8B%92%E7%BB%9D" target="_blank" rel="external">iOS上架各类问题汇总</a><br><a href="http://www.jianshu.com/p/4523eafb4cd4" target="_blank" rel="external">iOS各类小技巧总结</a><br><a href="http://www.cnblogs.com/XYQ-208910/p/5694749.html" target="_blank" rel="external">iOS:使用贝塞尔曲线绘制图表（折线图、柱状图、饼状图）</a><br><a href="https://github.com/oa414/objc-zen-book-cn#swift" target="_blank" rel="external">禅与 Objective-C 编程艺术</a><br><a id="more"></a><a href="https://github.com/AttackOnDobby/iOS-Core-Animation-Advanced-Techniques" target="_blank" rel="external">iOS-Core-Animation-Advanced-Techniques</a><br><a href="http://www.jianshu.com/p/66bc16b872d7" target="_blank" rel="external">iOS10 适配、Xcode8配置总结</a><br><a href="http://jinqianchina.github.io/2015/10/17/UITextView-UITextField%E6%A3%80%E6%B5%8B%E5%B9%B6%E8%BF%87%E6%BB%A4Emoji%E8%A1%A8%E6%83%85%E7%AC%A6%E5%8F%B7/" target="_blank" rel="external">UITextView/UITextField检测并过滤Emoji表情符号</a><br><a href="http://www.jianshu.com/p/8883b4a7ed98" target="_blank" rel="external">iOS 手势解锁功能</a><br><a href="https://blog.ibireme.com/2015/11/12/smooth_user_interfaces_for_ios/" target="_blank" rel="external">iOS 保持界面流畅的技巧</a><br><a href="http://www.liuchungui.com/blog/2015/11/24/uicollectionviewdong-hua/" target="_blank" rel="external">UICollectionView动画</a><br><a href="http://www.jianshu.com/p/b2c9e1e5a642" target="_blank" rel="external">iOS 视频播放的四种方式</a><br><a href="http://www.cocoachina.com/ios/20150602/11968.html" target="_blank" rel="external">UITableView 优化技巧</a><br><a href="http://qingmang.me/articles/773874873800098340/" target="_blank" rel="external">苹果开发者账号及邓白氏编码的申请</a><br><a href="https://github.com/airbnb/lottie-ios" target="_blank" rel="external">An iOS library to natively render After Effects vector animations </a><br><a href="http://www.swifthumb.com/thread-11284-1-1.html" target="_blank" rel="external">iOS面试题</a></p>
<h3 id="swift"><a href="#swift" class="headerlink" title="swift"></a>swift</h3><p><a href="https://github.com/ipader/SwiftGuide#welcome" target="_blank" rel="external">Swift 语言指南</a><br><a href="https://github.com/ipader/SwiftGuide/blob/master/Featured-Articles.md" target="_blank" rel="external">Swift guide</a><br><a href="http://www.jianshu.com/p/3111087ca081" target="_blank" rel="external">Swift写服务器</a><br><a href="http://www.hangge.com/blog/cache/category_72_1.html" target="_blank" rel="external">Swift-航歌-编程社区</a><br><a href="http://www.jianshu.com/p/c6c9ac80b75f" target="_blank" rel="external">Swift 实现格瓦拉转场</a><br><a href="http://www.devashen.com/blog/2016/01/07/datasafety/" target="_blank" rel="external">iOS 常用加密方法</a><br><a href="http://www.devstore.cn/essay/essayInfo/7970.html" target="_blank" rel="external">39个优秀的Swift UI开源库</a><br><a href="http://www.swifthumb.com/forum.php?mod=collection&amp;action=view&amp;ctid=61" target="_blank" rel="external">Swift笔试面试题库</a></p>
<h2 id="心灵鸡汤"><a href="#心灵鸡汤" class="headerlink" title="心灵鸡汤"></a>心灵鸡汤</h2><hr>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzAxNjc5MTEyNw==&amp;mid=2652357278&amp;idx=1&amp;sn=a2458b07b4351276dc3fe79aecf9ba7e&amp;scene=21#wechat_redirect" target="_blank" rel="external">19-24岁做什么事才能少走冤枉路</a><br><a href="http://www.jianshu.com/p/6e9937e8790f" target="_blank" rel="external">25-30岁如何找到自己的毕生事业？</a><br><a href="https://www.kancloud.cn/luofei614/programmer_talk_life/107490" target="_blank" rel="external">内外兼修·程序员成长之路</a><br><a href="http://justjavac.com/other/2012/09/20/a-programmer-mentees-recommendations.html" target="_blank" rel="external">程序员之路——一个老程序员对刚上大学的学弟学妹的忠告</a><br><a href="http://blog.jobbole.com/107445/" target="_blank" rel="external">写给程序员的有效学习方法</a><br><a href="http://www.jianshu.com/p/c5ee74eabaa1" target="_blank" rel="external">为了不让彼此错过，在您做出决定之前，请给我1分钟的面谈机会，好吗？谢谢！</a><br><a href="http://www.jianshu.com/p/60dbea95a980" target="_blank" rel="external">投资理财，从这里开始</a><br><a href="http://coolshell.cn/articles/4990.html" target="_blank" rel="external">程序员技术练级攻略</a><br><a href="http://blog.jobbole.com/821/" target="_blank" rel="external">程序员的本质</a><br><a href="http://blog.jobbole.com/100737/?utm_source=top.jobbole.com&amp;utm_medium=relatedArticles" target="_blank" rel="external">编程超过 30 年，我是如何避开倦怠期的？</a><br><a href="https://www.gitbook.com/book/xiaolai/reborn/details" target="_blank" rel="external">新生</a></p>
<h2 id="算法与编程技巧"><a href="#算法与编程技巧" class="headerlink" title="算法与编程技巧"></a>算法与编程技巧</h2><hr>
<p><a href="https://zhuanlan.zhihu.com/p/23191006" target="_blank" rel="external">[数据结构、算法] 的资源推荐</a><br><a href="http://www.jianshu.com/p/3c4a5fbd4b67" target="_blank" rel="external">算法相关文章索引</a><br><a href="http://zh.lucida.me/blog/on-learning-algorithms/" target="_blank" rel="external">算法学习之路</a><br><a href="http://www.jianshu.com/p/65768cd62757" target="_blank" rel="external">23 种设计模式-java实现</a><br><a href="http://design-patterns.readthedocs.io/zh_CN/latest/index.html" target="_blank" rel="external">图说设计模式</a><br><a href="http://coolshell.cn/articles/240.html" target="_blank" rel="external">编程技术教程</a><br><a href="https://www.hrwhisper.me/leetcode-algorithm-solution/" target="_blank" rel="external">Leetcode 算法题解</a></p>
<h2 id="git"><a href="#git" class="headerlink" title="git"></a>git</h2><hr>
<p><a href="http://www.cnblogs.com/Jenaral/p/5655958.html" target="_blank" rel="external">Git本地项目上传 &amp; SourceTree &amp; GitHub 简单使用</a><br><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">git教程-廖雪峰</a></p>
<h2 id="C-C"><a href="#C-C" class="headerlink" title="C/C++"></a>C/C++</h2><hr>
<p><a href="https://segmentfault.com/a/1190000010706695#articleHeader9" target="_blank" rel="external">写给大家看的设计模式 - C/C++ 的奇技淫巧</a><br><a href="http://c.biancheng.net/cpp/u/jiaocheng/" target="_blank" rel="external">C语言入门教程：c语言从入门到精通</a></p>
<h2 id="书籍推荐总览"><a href="#书籍推荐总览" class="headerlink" title="书籍推荐总览"></a>书籍推荐总览</h2><hr>
<p><a href="http://www.jianshu.com/p/43bac8c0cbe8" target="_blank" rel="external">英语学习推荐</a><br><a href="http://justjavac.com/other/2012/05/15/qualified-programmer-should-read-what-books.html" target="_blank" rel="external">一个合格的程序员应该读过哪些书</a><br><a href="http://blog.jobbole.com/1383/" target="_blank" rel="external">一些经典的计算机书籍</a><br><a href="https://www.zhihu.com/question/50408698" target="_blank" rel="external">有哪些你看了以后大呼过瘾的编程书？</a><br><a href="https://zhuanlan.zhihu.com/p/22881223" target="_blank" rel="external">Google Interview University</a><br><a href="https://linuxstory.org/free-chinese-programming-books/" target="_blank" rel="external">编程类开放书籍荟萃</a><br><a href="https://github.com/justjavac/free-programming-books-zh_CN" target="_blank" rel="external">免费的编程中文书籍索引</a><br><a href="https://github.com/EbookFoundation/free-programming-books/blob/master/free-programming-books.md#objective-c" target="_blank" rel="external">free-programming-books</a><br><a href="https://www.it-ebooks.info/" target="_blank" rel="external">IT eBooks(下载)</a><br><a href="http://blog.jobbole.com/107035/" target="_blank" rel="external">给编程生涯充电的 10 本书</a><br><a href="http://blog.jobbole.com/106093/" target="_blank" rel="external">推荐编程技术书列表</a><br><a href="http://blog.didiaoyuan.com/2017/04/18/%E6%80%BB%E6%9C%89%E4%BD%A0%E8%A6%81%E7%9A%84%E7%BC%96%E7%A8%8B%E4%B9%A6%E5%8D%95%EF%BC%88GitHub-%EF%BC%89/" target="_blank" rel="external">总有你要的编程书单（GitHub)</a><br><a href="https://zhuanlan.zhihu.com/p/23857699" target="_blank" rel="external">程序员的书籍资源</a><br><a href="https://github.com/EbookFoundation/free-programming-books/blob/master/free-programming-books.md#c-1" target="_blank" rel="external">free-programming-books/free-programming-books.md at master · EbookFoundation/free-programming-books</a><br><a href="http://blog.csdn.net/ajian005/article/details/51206976" target="_blank" rel="external">StuQ 技能图谱（全套13张）</a></p>
<h2 id="网站合集"><a href="#网站合集" class="headerlink" title="网站合集"></a>网站合集</h2><hr>
<p><a href="http://www.xiapistudio.com/" target="_blank" rel="external">虾皮工作室</a><br><a href="http://www.niaogebiji.com/isites.php" target="_blank" rel="external">鸟哥笔记</a><br><a href="http://www.afenxi.com/" target="_blank" rel="external">数据分析网</a><br><a href="http://www.devstore.cn/" target="_blank" rel="external">Dev Store</a><br><a href="http://www.jianshu.com/p/9f094ce31075" target="_blank" rel="external">自学编程的12个网站</a><br><a href="http://www.jianshu.com/p/db02bc37095b" target="_blank" rel="external">PPT速效装逼的8个网站</a><br><a href="http://www.igeekbar.com/igeekbar/post/291.htm" target="_blank" rel="external">挑战最强大脑–10个烧脑编程挑战网站</a><br><a href="http://www.devstore.cn/essay/essayInfo/5904.html" target="_blank" rel="external">38个学习新技能的最佳网站</a><br><a href="https://zhuanlan.zhihu.com/p/23005451" target="_blank" rel="external">16个小众却很实用的网站（程序员 向）</a></p>
<h2 id="文档编辑"><a href="#文档编辑" class="headerlink" title="文档编辑"></a>文档编辑</h2><hr>
<p><a href="http://data-blog.udacity.com/posts/2016/10/latex-primer/" target="_blank" rel="external">Latex</a></p>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><hr>
<p><a href="https://www.douban.com/group/topic/42095476/" target="_blank" rel="external">Python教程-豆瓣</a><br><a href="https://juejin.im/post/59489de7128fe1006a576ddc" target="_blank" rel="external">Django 入门教程</a><br><a href="https://www.zhihu.com/question/29372574" target="_blank" rel="external">Python 的练手项目推荐</a><br><a href="https://juejin.im/entry/58469472ac502e006b098cc9" target="_blank" rel="external">Python 网络爬虫实战项目代码大全</a><br><a href="https://doc.odoo.com/7.0/zh_CN/contribute/15_guidelines/coding_guidelines_python/#use-constants-and-avoid-magic-numbers" target="_blank" rel="external">Python代码风格指南</a><br><a href="http://101python.cn/" target="_blank" rel="external">Python 实战</a><br><a href="https://mp.weixin.qq.com/s/mB-H-hSxAteJjMwLSVuPFA" target="_blank" rel="external">Python之禅文章集锦</a><br><a href="https://zhuanlan.zhihu.com/p/28008875?utm_source=wechat_session&amp;utm_medium=social" target="_blank" rel="external">59个Python使用技巧</a><br><a href="https://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/" target="_blank" rel="external">Python 2.7教程 廖雪峰</a><br><a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000" target="_blank" rel="external">Python 3教程 廖雪峰</a><br><a href="http://python.jobbole.com/87527/?repeat=w3tc" target="_blank" rel="external">左手程序员，右手作家：你必须会的Jupyter Notebook</a><br><a href="http://pandas.pydata.org/pandas-docs/stable/dsintro.html#panel" target="_blank" rel="external">Intro to Data Structures — pandas 0.20.3 documentation</a><br><a href="http://pandas.pydata.org/pandas-docs/stable/groupby.html" target="_blank" rel="external">Group By: split-apply-combine</a><br><a href="https://pandas.pydata.org/pandas-docs/stable/missing_data.html" target="_blank" rel="external">Working with missing data</a><br><a href="http://blog.csdn.net/suzyu12345/article/details/50733932" target="_blank" rel="external">Pandas 基础知识</a></p>
<h2 id="Machine-Learning"><a href="#Machine-Learning" class="headerlink" title="Machine Learning"></a>Machine Learning</h2><hr>
<p><a href="http://ml.memect.com/" target="_blank" rel="external">机器学习日报</a><br><a href="http://student.zjzk.cn/course_ware/web_xlyjytjx/skxt/kcml.htm" target="_blank" rel="external">统计学</a><br><a href="https://github.com/JustFollowUs/Machine-Learning" target="_blank" rel="external">Machine-Learning</a><br><a href="https://github.com/ZuzooVn/machine-learning-for-software-engineers/blob/master/README-zh-CN.md" target="_blank" rel="external">软件工程师的机器学习</a><br><a href="http://mooc.guokr.com/note/16274/" target="_blank" rel="external">斯坦福大学机器学习个人笔记完整版（附所有视频和字幕）</a><br><a href="https://yoyoyohamapi.gitbooks.io/mit-ml/content/" target="_blank" rel="external">斯坦福机器学习笔记</a><br><a href="https://woaielf.github.io/2016/09/11/data-science/" target="_blank" rel="external">数据科学技能树</a><br><a href="https://yanqiangmiffy.github.io/2017/07/26/Python28-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%EF%BC%88%E4%BD%BF%E7%94%A8Python%E5%92%8CR%E4%BB%A3%E7%A0%81%EF%BC%89/" target="_blank" rel="external">机器学习算法的基本知识（使用Python和R代码）</a><br><a href="https://yq.aliyun.com/articles/86580?utm_content=m_23978" target="_blank" rel="external">深度学习入门系列，用白话文的方式让你看得懂学的快</a><br><a href="https://github.com/Tim9Liu9/TimLiu-iOS" target="_blank" rel="external">Values of the Pearson Correlation</a><br><a href="https://github.com/wxyyxc1992/DataScience-And-MachineLearning-Handbook-For-Coders" target="_blank" rel="external">程序猿的数据科学与机器学习实战手册</a><br><a href="https://zhuanlan.zhihu.com/p/22838288" target="_blank" rel="external">人工智能公开课</a></p>
<blockquote>
<p><em>不定期更新</em></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;iOS&quot;&gt;&lt;a href=&quot;#iOS&quot; class=&quot;headerlink&quot; title=&quot;iOS&quot;&gt;&lt;/a&gt;iOS&lt;/h2&gt;&lt;hr&gt;
&lt;h3 id=&quot;Objectice-C&quot;&gt;&lt;a href=&quot;#Objectice-C&quot; class=&quot;headerlink&quot; title=&quot;Objectice-C&quot;&gt;&lt;/a&gt;Objectice-C&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://www.jianshu.com/p/c8152d6ce957&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS常用第三方库&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://juejin.im/post/5945187afe88c2006a74076a&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS Swift 面试&amp;amp;工作-博主\博文&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.jianshu.com/p/4daa99b73a1d&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS-UIApplication简介&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/Tim9Liu9/TimLiu-iOS&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS开发常用三方库、插件、知名博客&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/wg689/Solve-App-Store-Review-Problem#%E9%97%AE%E9%A2%98ipv6%E8%A2%AB%E6%8B%92%E7%BB%9D&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS上架各类问题汇总&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.jianshu.com/p/4523eafb4cd4&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS各类小技巧总结&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/XYQ-208910/p/5694749.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS:使用贝塞尔曲线绘制图表（折线图、柱状图、饼状图）&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/oa414/objc-zen-book-cn#swift&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;禅与 Objective-C 编程艺术&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="资料集合" scheme="http://yoursite.com/categories/%E8%B5%84%E6%96%99%E9%9B%86%E5%90%88/"/>
    
    
  </entry>
  
  <entry>
    <title>Numpy的使用</title>
    <link href="http://yoursite.com/2017/08/17/Numpy%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2017/08/17/Numpy的使用/</id>
    <published>2017-08-17T01:16:21.000Z</published>
    <updated>2017-08-17T01:24:48.000Z</updated>
    
    <content type="html"><![CDATA[<hr>
<h3 id="numpy数组的创建"><a href="#numpy数组的创建" class="headerlink" title="numpy数组的创建"></a>numpy数组的创建</h3><ul>
<li>生成0-10的一维数组<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line">np.arange(<span class="number">10</span>)</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>out: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])</p>
</blockquote>
<ul>
<li>生成一个三行四列全为1的二维数组<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">np.ones([<span class="number">3</span>, <span class="number">4</span>])</div><div class="line">np.ones(<span class="number">3</span>)</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>out: array([ 1.,  1.,  1.])</p>
</blockquote>
<ul>
<li>生成一个二行二列全为0的二维数组<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">np.zeros([<span class="number">2</span>, <span class="number">2</span>])</div><div class="line">np.zeros(<span class="number">5</span>)</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>out: array([ 0.,  0.,  0.,  0.,  0.])</p>
</blockquote>
<ul>
<li>生成空数组<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">np.empty(<span class="number">4</span>)</div><div class="line">np.empty([<span class="number">3</span>, <span class="number">4</span>])</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>out: array([[ 1.,  1.,  1.,  1.],<br>           [ 1.,  1.,  1.,  1.],<br>           [ 1.,  1.,  1.,  1.]])</p>
</blockquote>
<a id="more"></a>
<h3 id="numpy-数组的基本操作"><a href="#numpy-数组的基本操作" class="headerlink" title="numpy 数组的基本操作"></a>numpy 数组的基本操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">arr = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],[<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>],[<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>]])</div><div class="line"><span class="keyword">print</span> <span class="string">'shape -&gt;'</span>, arr.shape   <span class="comment"># 返回数组的行数和列数</span></div><div class="line"><span class="keyword">print</span> <span class="string">'dtype -&gt;'</span>, arr.dtype   <span class="comment"># 返回数组的数据类型</span></div><div class="line"><span class="keyword">print</span> <span class="string">'ravel -&gt;'</span>, arr.ravel()   <span class="comment"># 多维数组降为一维数组</span></div><div class="line"><span class="keyword">print</span> <span class="string">'flatten -&gt;'</span>, arr.flatten() <span class="comment"># 多维数组降为一维数组</span></div><div class="line"><span class="comment"># 两者的区别在于ravel方法生成的是原数组的视图，无需占有内存空间，但视图的改变会影响到原数组的变化。而flatten方法返回的是真实值，其值的改变并不会影响原数组的更改。</span></div><div class="line"><span class="keyword">print</span> <span class="string">'ndim -&gt;'</span>, arr.ndim  <span class="comment"># 数组的维数</span></div><div class="line"><span class="keyword">print</span> <span class="string">'size -&gt;'</span>, arr.size  <span class="comment"># 数组元素的个数</span></div><div class="line"><span class="keyword">print</span> <span class="string">'T -&gt;\n'</span>, arr.T  <span class="comment"># 数组的转置</span></div><div class="line"><span class="comment"># 如果数组的数据类型为复数的话，real方法可以返回复数的实部，imag方法返回复数的虚部。</span></div><div class="line"></div><div class="line"><span class="keyword">print</span> <span class="string">'len -&gt;'</span>, len(arr) <span class="comment"># 数组的行数</span></div><div class="line"><span class="keyword">print</span> <span class="string">'hstack -&gt; \n'</span>, np.hstack((arr, arr)) <span class="comment"># 如果数组的数据类型为复数的话，real方法可以返回复数的实部，imag方法返回复数的虚部。</span></div><div class="line"></div><div class="line"><span class="keyword">print</span> <span class="string">'vstack -&gt;\n'</span>, np.vstack((arr, arr)) <span class="comment"># 纵向拼接arr3和arr4两个数组，但必须满足两个数组的列数相同。</span></div></pre></td></tr></table></figure>
<blockquote>
<p><strong>out:</strong><br>    shape -&gt; (3, 4)<br>    dtype -&gt; int64<br>    ravel -&gt; [ 1  2  3  4  5  6  7  8  9 10 11 12]<br>    flatten -&gt; [ 1  2  3  4  5  6  7  8  9 10 11 12]<br>    ndim -&gt; 2<br>    size -&gt; 12<br>    T -&gt;<br>    [[ 1  5  9]<br>     [ 2  6 10]<br>     [ 3  7 11]<br>     [ 4  8 12]]<br>    len -&gt; 3<br>    hstack -&gt;<br>    [[ 1  2  3  4  1  2  3  4]<br>     [ 5  6  7  8  5  6  7  8]<br>     [ 9 10 11 12  9 10 11 12]]<br>    vstack -&gt;<br>    [[ 1  2  3  4]<br>     [ 5  6  7  8]<br>     [ 9 10 11 12]<br>     [ 1  2  3  4]<br>     [ 5  6  7  8]<br>     [ 9 10 11 12]]</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># reshape()函数和resize()函数可以重新设置数组的行数和列数</span></div><div class="line">arr2 = np.array(np.arange(<span class="number">20</span>))</div><div class="line"><span class="keyword">print</span> <span class="string">'arr2 -&gt;'</span>, arr2</div><div class="line"></div><div class="line"><span class="comment"># 通过reshape函数将一维数组设置为二维数组，且为4行5列的数组。</span></div><div class="line">rearr = arr2.reshape(<span class="number">4</span>, <span class="number">5</span>)</div><div class="line"><span class="keyword">print</span> <span class="string">'reshape(4, 5) -&gt;\n'</span>, rearr</div><div class="line"></div><div class="line"><span class="comment"># 通过resize函数会直接改变原数组的形状。</span></div><div class="line">arr2.resize(<span class="number">5</span>, <span class="number">4</span>)</div><div class="line"><span class="keyword">print</span> <span class="string">'resize(5, 4) -&gt;\n'</span>, arr2</div><div class="line"><span class="comment"># *通过resize函数会直接改变原数组的形状。*</span></div></pre></td></tr></table></figure>
<pre><code>arr2 -&gt; [ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19]
reshape(4, 5) -&gt;
[[ 0  1  2  3  4]
 [ 5  6  7  8  9]
 [10 11 12 13 14]
 [15 16 17 18 19]]
resize(5, 4) -&gt;
[[ 0  1  2  3]
 [ 4  5  6  7]
 [ 8  9 10 11]
 [12 13 14 15]
 [16 17 18 19]]
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 数组转换：tolist将数组转换为列表，astype()强制转换数组的数据类型</span></div><div class="line">a = np.array(np.arange(<span class="number">24</span>))</div><div class="line">a.resize(<span class="number">6</span>, <span class="number">4</span>)</div><div class="line">b = a.tolist()</div><div class="line"><span class="keyword">print</span> <span class="string">'tolist -&gt;\n'</span>, b, type(b)</div><div class="line"></div><div class="line">c = a.astype(float)</div><div class="line"><span class="keyword">print</span> <span class="string">'astype -&gt;\n'</span>, c, c.dtype</div></pre></td></tr></table></figure>
<pre><code> tolist -&gt;
[[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11], [12, 13, 14, 15], [16, 17, 18, 19], [20, 21, 22, 23]] &lt;type &apos;list&apos;&gt;
astype -&gt;
[[  0.   1.   2.   3.]
 [  4.   5.   6.   7.]
 [  8.   9.  10.  11.]
 [ 12.  13.  14.  15.]
 [ 16.  17.  18.  19.]
 [ 20.  21.  22.  23.]] float64
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 一维数组元素的获取</span></div><div class="line">A = np.array(np.arange(<span class="number">10</span>))</div><div class="line"></div><div class="line"><span class="keyword">print</span> <span class="string">'第五个元素: '</span>, A[<span class="number">4</span>]</div><div class="line"><span class="keyword">print</span> <span class="string">'前三个元素: '</span>, A[:<span class="number">3</span>]</div><div class="line"><span class="keyword">print</span> <span class="string">'末尾两个元素: '</span>, A[<span class="number">-2</span>:]</div><div class="line"><span class="keyword">print</span> <span class="string">'第一个开始步长为2的元素:'</span>, A[::<span class="number">2</span>]</div></pre></td></tr></table></figure>
<pre><code>第五个元素:  4
前三个元素:  [0 1 2]
末尾两个元素:  [8 9]
第一个开始步长为2的元素: [0 2 4 6 8]
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 二维数组元素的获取</span></div><div class="line">B = np.array(np.arange(<span class="number">12</span>)).reshape(<span class="number">3</span>,<span class="number">4</span>)</div><div class="line"><span class="keyword">print</span> <span class="string">'B \n'</span>, B</div><div class="line"><span class="keyword">print</span> <span class="string">'数组第二行: '</span>, B[<span class="number">1</span>]</div><div class="line"><span class="keyword">print</span> <span class="string">'数组前两行: \n'</span>, B[:<span class="number">2</span>] </div><div class="line"><span class="keyword">print</span> <span class="string">'第一行与第三行: \n'</span>, B[[<span class="number">0</span>, <span class="number">2</span>]]</div><div class="line"><span class="keyword">print</span> <span class="string">'数组第一列: \n'</span>, B[:, <span class="number">0</span>]</div><div class="line"><span class="keyword">print</span> <span class="string">'数组的后两列: \n'</span>, B[:, <span class="number">-2</span>:]</div><div class="line"><span class="keyword">print</span> <span class="string">'数组的第一列与第三列: \n'</span>, B[:, [<span class="number">0</span>, <span class="number">2</span>]]</div><div class="line"><span class="keyword">print</span> <span class="string">'按照指定顺序返回指定行: \n'</span>, B[[<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>]]</div><div class="line"><span class="keyword">print</span> <span class="string">'返回指定的行与列: \n'</span>, B[[<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>]][:, [<span class="number">3</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>]]</div><div class="line"></div><div class="line"><span class="comment"># 如果想使用比较简单的方式返回指定行以列的二维数组的话，可以使用ix_()函数</span></div><div class="line">B[np.ix_([<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>],[<span class="number">3</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>])]</div></pre></td></tr></table></figure>
<pre><code>B 
[[ 0  1  2  3]
 [ 4  5  6  7]
 [ 8  9 10 11]]
数组第二行:  [4 5 6 7]
数组前两行: 
[[0 1 2 3]
 [4 5 6 7]]
第一行与第三行: 
[[ 0  1  2  3]
 [ 8  9 10 11]]
数组第一列: 
[0 4 8]
数组的后两列: 
[[ 2  3]
 [ 6  7]
 [10 11]]
数组的第一列与第三列: 
[[ 0  2]
 [ 4  6]
 [ 8 10]]
按照指定顺序返回指定行: 
[[ 4  5  6  7]
 [ 8  9 10 11]
 [ 0  1  2  3]]
返回指定的行与列: 
[[11  9  8 10]
 [ 3  1  0  2]
 [ 7  5  4  6]]
array([[11,  9,  8, 10],
       [ 3,  1,  0,  2],
       [ 7,  5,  4,  6]])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 布尔索引 -&gt; 即索引值为True和False，需要注意的是布尔索引必须输数组对象。</span></div><div class="line">log = np.array([<span class="keyword">True</span>,<span class="keyword">False</span>,<span class="keyword">False</span>,<span class="keyword">True</span>,<span class="keyword">True</span>,<span class="keyword">False</span>])</div><div class="line">arrL = np.array(np.arange(<span class="number">24</span>)).reshape(<span class="number">6</span>,<span class="number">4</span>)</div><div class="line"><span class="keyword">print</span> <span class="string">'返回所有为True的对应行: \n'</span>, arrL[log]</div><div class="line"><span class="keyword">print</span> <span class="string">'通过负号筛选出所有为False的对应行: \n'</span>, arrL[~log]</div><div class="line"></div><div class="line"><span class="comment"># 举一个场景，一维数组表示区域，二维数组表示观测值，如何选取目标区域的观测</span></div><div class="line">area = np.array([<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'A'</span>,<span class="string">'C'</span>,<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'D'</span>])</div><div class="line">observes = np.array(np.arange(<span class="number">21</span>)).reshape(<span class="number">7</span>,<span class="number">3</span>)</div><div class="line"><span class="keyword">print</span> <span class="string">'返回所有A区域的观测: \n'</span>, observes[area == <span class="string">'A'</span>]</div><div class="line"><span class="keyword">print</span> <span class="string">'返回所有A区域和D区域的观测: \n'</span>, observes[(area == <span class="string">'A'</span>) | (area == <span class="string">'D'</span>)]</div></pre></td></tr></table></figure>
<pre><code>返回所有为True的对应行: 
[[ 0  1  2  3]
 [12 13 14 15]
 [16 17 18 19]]
通过负号筛选出所有为False的对应行: 
[[ 4  5  6  7]
 [ 8  9 10 11]
 [20 21 22 23]]
返回所有A区域的观测: 
[[ 0  1  2]
 [ 6  7  8]
 [12 13 14]]
返回所有A区域和D区域的观测: 
[[ 0  1  2]
 [ 6  7  8]
 [12 13 14]
 [18 19 20]]
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 统计函数与线性代数计算</span></div><div class="line">arr11 = <span class="number">5</span> - np.arange(<span class="number">1</span>,<span class="number">13</span>).reshape(<span class="number">4</span>,<span class="number">3</span>)</div><div class="line">arr12 = np.random.randint(<span class="number">1</span>,<span class="number">10</span>,size=<span class="number">12</span>).reshape(<span class="number">4</span>,<span class="number">3</span>)</div><div class="line"></div><div class="line"><span class="keyword">print</span> arr11</div><div class="line"><span class="keyword">print</span> <span class="string">'每个元素的平方: \n'</span>, arr11 ** <span class="number">2</span></div><div class="line"><span class="keyword">print</span> <span class="string">'每个元素的平方根: \n'</span>, np.sqrt(arr11) <span class="comment"># 负值无意义，返回nan</span></div><div class="line"></div><div class="line"><span class="keyword">print</span> <span class="string">'每个元素的指数值: \n'</span>, np.exp(arr11)</div><div class="line"><span class="keyword">print</span> <span class="string">'每个元素的自然对数: \n'</span>, np.log(arr11)</div><div class="line"><span class="keyword">print</span> <span class="string">'每个元素的绝对值: \n'</span>, np.abs(arr11)</div></pre></td></tr></table></figure>
<pre><code>[[ 4  3  2]
 [ 1  0 -1]
 [-2 -3 -4]
 [-5 -6 -7]]
每个元素的平方: 
[[16  9  4]
 [ 1  0  1]
 [ 4  9 16]
 [25 36 49]]
每个元素的平方根: 
[[ 2.          1.73205081  1.41421356]
 [ 1.          0.                 nan]
 [        nan         nan         nan]
 [        nan         nan         nan]]
每个元素的指数值: 
[[  5.45981500e+01   2.00855369e+01   7.38905610e+00]
 [  2.71828183e+00   1.00000000e+00   3.67879441e-01]
 [  1.35335283e-01   4.97870684e-02   1.83156389e-02]
 [  6.73794700e-03   2.47875218e-03   9.11881966e-04]]
每个元素的自然对数: 
[[ 1.38629436  1.09861229  0.69314718]
 [ 0.                -inf         nan]
 [        nan         nan         nan]
 [        nan         nan         nan]]
每个元素的绝对值: 
[[4 3 2]
 [1 0 1]
 [2 3 4]
 [5 6 7]]
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">print</span> <span class="string">'数组相加: \n'</span>, arr11 + arr12</div><div class="line"><span class="keyword">print</span> <span class="string">'数组相减: \n'</span>, arr11 - arr12</div><div class="line"><span class="keyword">print</span> <span class="string">'数组相乘: \n'</span>, arr11 * arr12</div><div class="line"><span class="keyword">print</span> <span class="string">'数组相除: \n'</span>, arr11 / arr12</div><div class="line"><span class="keyword">print</span> <span class="string">'数组取余: \n'</span>, arr11 % arr12</div></pre></td></tr></table></figure>
<pre><code>数组相加: 
[[ 6  4 10]
 [ 8  1  4]
 [ 4  2 -1]
 [ 4 -1 -1]]
数组相减: 
[[  2   2  -6]
 [ -6  -1  -6]
 [ -8  -8  -7]
 [-14 -11 -13]]
数组相乘: 
[[  8   3  16]
 [  7   0  -5]
 [-12 -15 -12]
 [-45 -30 -42]]
数组相除: 
[[ 2  3  0]
 [ 0  0 -1]
 [-1 -1 -2]
 [-1 -2 -2]]
数组取余: 
[[0 0 2]
 [1 0 4]
 [4 2 2]
 [4 4 5]]
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 统计运算函数</span></div><div class="line"><span class="keyword">print</span> <span class="string">'计算所有元素的和: '</span>, np.sum(arr11)</div><div class="line"><span class="keyword">print</span> <span class="string">'对每一列求和: '</span>, np.sum(arr11, axis = <span class="number">0</span>)</div><div class="line"><span class="keyword">print</span> <span class="string">'对每一行求和: '</span>, np.sum(arr11, axis = <span class="number">1</span>)</div><div class="line"><span class="keyword">print</span> <span class="string">'对每一个元素求累积和（从上到下，从左到右的元素顺序）:'</span>, np.cumsum(arr11)</div><div class="line"><span class="keyword">print</span> <span class="string">'计算每一列的累积和，并返回二维数组: \n'</span>, np.cumsum(arr11, axis = <span class="number">0</span>)</div><div class="line"><span class="keyword">print</span> <span class="string">'计算每一行的累计积，并返回二维数组: \n'</span>, np.cumprod(arr11, axis = <span class="number">0</span>)</div></pre></td></tr></table></figure>
<pre><code>计算所有元素的和:  -18
对每一列求和:  [ -2  -6 -10]
对每一行求和:  [  9   0  -9 -18]
对每一个元素求累积和（从上到下，从左到右的元素顺序）: [  4   7   9  10  10   9   7   4   0  -5 -11 -18]
计算每一列的累积和，并返回二维数组: 
[[  4   3   2]
 [  5   3   1]
 [  3   0  -3]
 [ -2  -6 -10]]
计算每一行的累计积，并返回二维数组: 
[[  4   3   2]
 [  4   0  -2]
 [ -8   0   8]
 [ 40   0 -56]]
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">print</span> <span class="string">'计算所有元素的最小值: '</span>, np.min(arr11)</div><div class="line"><span class="keyword">print</span> <span class="string">'计算所有元素的最大值: '</span>, np.max(arr11)</div><div class="line"><span class="keyword">print</span> <span class="string">'计算所有元素的均值: '</span>, np.mean(arr11)</div><div class="line"><span class="keyword">print</span> <span class="string">'计算每一行的均值: '</span>, np.mean(arr11, axis = <span class="number">1</span>)</div><div class="line"><span class="keyword">print</span> <span class="string">'计算所有元素的中位数: '</span>, np.median(arr11)</div><div class="line"><span class="keyword">print</span> <span class="string">'计算每一列的中位数: '</span>, np.median(arr11, axis = <span class="number">0</span>)</div><div class="line"><span class="keyword">print</span> <span class="string">'计算所有元素的方差: '</span>, np.var(arr11)</div><div class="line"><span class="keyword">print</span> <span class="string">'计算所有元素的标准差: '</span>, np.std(arr11)</div><div class="line"><span class="keyword">print</span> <span class="string">'计算每一行的标准差: '</span>, np.std(arr11, axis = <span class="number">1</span>)</div><div class="line"><span class="comment"># numpy还有其他函数可以计算sign，ceil(&gt;=x的最小整数)，floor(&lt;=x的最大整数)，</span></div><div class="line"><span class="comment"># modf(将浮点数的整数部分与小数部分分别存入两个独立的数组)，cos，arccos，sin，arcsin，tan，arctan等</span></div></pre></td></tr></table></figure>
<pre><code>计算所有元素的最小值:  -7
计算所有元素的最大值:  4
计算所有元素的均值:  -1.5
计算每一行的均值:  [ 3.  0. -3. -6.]
计算所有元素的中位数:  -1.5
计算每一列的中位数:  [-0.5 -1.5 -2.5]
计算所有元素的方差:  11.9166666667
计算所有元素的标准差:  3.45205252953
计算每一行的标准差:  [ 0.81649658  0.81649658  0.81649658  0.81649658]
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># where()</span></div><div class="line">np.where(arr11&lt;<span class="number">0</span>, <span class="string">'negtive'</span>, <span class="string">'positive'</span>)</div></pre></td></tr></table></figure>
<pre><code>array([[&apos;positive&apos;, &apos;positive&apos;, &apos;positive&apos;],
       [&apos;positive&apos;, &apos;positive&apos;, &apos;negtive&apos;],
       [&apos;negtive&apos;, &apos;negtive&apos;, &apos;negtive&apos;],
       [&apos;negtive&apos;, &apos;negtive&apos;, &apos;negtive&apos;]], 
      dtype=&apos;|S8&apos;)
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># unique(x): 计算x的唯一元素, 并返回有序结果</span></div><div class="line">np.unique(arr11)</div></pre></td></tr></table></figure>
<pre><code>array([-7, -6, -5, -4, -3, -2, -1,  0,  1,  2,  3,  4])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># union1d(x, y): 计算x和y的并集</span></div><div class="line">np.union1d(arr11, arr12)</div></pre></td></tr></table></figure>
<pre><code>array([-7, -6, -5, -4, -3, -2, -1,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># setdiff1d(x,y):计算x和y的差集，即元素在x中，不在y中</span></div><div class="line">np.setdiff1d(arr11,arr12)</div></pre></td></tr></table></figure>
<pre><code>array([-7, -6, -5, -4, -3, -2, -1,  0,  4])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># setxor1d(x,y):计算集合的对称差，即存在于一个数组中，但不同时存在于两个数组中</span></div><div class="line">np.setxor1d(arr11,arr12)</div></pre></td></tr></table></figure>
<pre><code>array([-7, -6, -5, -4, -3, -2, -1,  0,  4,  5,  6,  7,  8,  9])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># in1d(x,y):判断x的元素是否包含于y中</span></div><div class="line">np.in1d(arr11,arr12)</div></pre></td></tr></table></figure>
<pre><code>array([False,  True,  True,  True, False, False, False, False, False,
       False, False, False], dtype=bool)
</code></pre><h3 id="线性代数计算"><a href="#线性代数计算" class="headerlink" title="线性代数计算"></a>线性代数计算</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># numpy可以进行线性代数方面的计算，如行列式、逆、迹、特征根、特征向量等</span></div><div class="line">arr13 = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>],[<span class="number">2</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">6</span>],[<span class="number">1</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">3</span>],[<span class="number">2</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">1</span>]])</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 返回方阵的行列式</span></div><div class="line">np.linalg.det(arr13)</div></pre></td></tr></table></figure>
<pre><code>51.000000000000021
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 返回方阵的逆</span></div><div class="line">np.linalg.inv(arr13)</div></pre></td></tr></table></figure>
<pre><code>array([[-2.23529412,  1.05882353,  1.70588235, -0.29411765],
       [ 0.68627451, -0.25490196, -0.7254902 ,  0.2745098 ],
       [ 0.19607843, -0.21568627,  0.07843137,  0.07843137],
       [ 0.25490196,  0.01960784, -0.09803922, -0.09803922]])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 返回方阵的迹（对角线元素之和）</span></div><div class="line">np.trace(arr13)</div></pre></td></tr></table></figure>
<pre><code>10
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 返回由特征根和特征向量组成的元组</span></div><div class="line">np.linalg.eig(arr13)</div></pre></td></tr></table></figure>
<pre><code>(array([ 11.35035004,  -3.99231852,  -0.3732631 ,   3.01523159]),
 array([[-0.4754174 , -0.48095078, -0.95004728,  0.19967185],
        [-0.60676806, -0.42159999,  0.28426325, -0.67482638],
        [-0.36135292, -0.16859677,  0.08708826,  0.70663129],
        [-0.52462832,  0.75000995,  0.09497472, -0.07357122]]))
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 返回方阵的QR分解</span></div><div class="line">np.linalg.qr(arr13)</div></pre></td></tr></table></figure>
<pre><code>(array([[-0.31622777, -0.07254763, -0.35574573, -0.87645982],
        [-0.63245553, -0.14509525,  0.75789308, -0.06741999],
        [-0.31622777, -0.79802388, -0.38668014,  0.33709993],
        [-0.63245553,  0.580381  , -0.38668014,  0.33709993]]),
 array([[-3.16227766, -6.64078309, -5.37587202, -6.95701085],
        [ 0.        ,  1.37840488, -1.23330963, -3.04700025],
        [ 0.        ,  0.        , -3.40278524,  1.22190924],
        [ 0.        ,  0.        ,  0.        , -3.4384193 ]]))
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 返回方阵的奇异值分解</span></div><div class="line">np.linalg.svd(arr13)</div></pre></td></tr></table></figure>
<pre><code>(array([[-0.50908395,  0.27580803,  0.35260559, -0.73514132],
        [-0.59475561,  0.4936665 , -0.53555663,  0.34020325],
        [-0.39377551, -0.10084917,  0.70979004,  0.57529852],
        [-0.48170545, -0.81856751, -0.29162732, -0.11340459]]),
 array([ 11.82715609,   4.35052602,   3.17710166,   0.31197297]),
 array([[-0.25836994, -0.52417446, -0.47551003, -0.65755329],
        [-0.10914615, -0.38326507, -0.54167613,  0.74012294],
        [-0.18632462, -0.68784764,  0.69085326,  0.12194478],
        [ 0.94160248, -0.32436807, -0.05655931, -0.07050652]]))
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 方阵的正真乘积运算</span></div><div class="line"><span class="keyword">print</span> np.dot(arr13,arr13)</div><div class="line"></div><div class="line">arr14 = np.array([[<span class="number">1</span>,<span class="number">-2</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">2</span>,<span class="number">-8</span>],[<span class="number">-4</span>,<span class="number">5</span>,<span class="number">9</span>]])</div><div class="line">vector = np.array([<span class="number">0</span>,<span class="number">8</span>,<span class="number">9</span>])</div><div class="line">np.linalg.solve(arr14,vector)</div></pre></td></tr></table></figure>
<pre><code>[[18 38 37 31]
 [23 51 38 43]
 [13 25 32 26]
 [18 33 31 53]]
array([ 155.,   88.,   21.])
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h3 id=&quot;numpy数组的创建&quot;&gt;&lt;a href=&quot;#numpy数组的创建&quot; class=&quot;headerlink&quot; title=&quot;numpy数组的创建&quot;&gt;&lt;/a&gt;numpy数组的创建&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;生成0-10的一维数组&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; np&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; pandas &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; pd&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;np.arange(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;out: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;生成一个三行四列全为1的二维数组&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;np.ones([&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;])&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;np.ones(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;out: array([ 1.,  1.,  1.])&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;生成一个二行二列全为0的二维数组&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;np.zeros([&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;])&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;np.zeros(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;out: array([ 0.,  0.,  0.,  0.,  0.])&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;生成空数组&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;np.empty(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;np.empty([&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;])&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;out: array([[ 1.,  1.,  1.,  1.],&lt;br&gt;           [ 1.,  1.,  1.,  1.],&lt;br&gt;           [ 1.,  1.,  1.,  1.]])&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>数据分析</title>
    <link href="http://yoursite.com/2017/08/07/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2017/08/07/数据分析/</id>
    <published>2017-08-07T06:26:01.000Z</published>
    <updated>2017-08-08T07:58:42.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="统计方法"><a href="#统计方法" class="headerlink" title="统计方法"></a>统计方法</h3><blockquote>
<p>许多场景下经常会根据所谓的<em>经验之谈</em>来对某些事件总结观点获得结论。所谓的<em>经验之谈</em>在非正式场合下，这类说辞没有太大的问题，然后大多数时候，我们需要有说服力的正经以及可靠的结论，经验之谈明显不能做到这一点。</p>
<ul>
<li>经验之谈的缺点(同事也是影响有效调查的因素)：<ul>
<li>观察数量少</li>
<li>数据的选择性偏差</li>
<li>确认偏差(一部分提供支持示例，一部分引用反例）</li>
<li>数据的不准确</li>
</ul>
</li>
</ul>
</blockquote>
<ul>
<li><strong>统计方法的手段</strong><blockquote>
<ul>
<li>收集数据: 使用大型的调查数据，这些往往是为了得出某个结论进行可靠地统计推断专门收集而来</li>
<li>描述性统计: 计算能总计数据的统计量, 评测各种数据的可视化方法（表格图形法）</li>
<li>探索性数据分析: 寻找模式、差异和其它能解决我们疑问的特征。同时检查不一致性，确认其局限性- 假设检验</li>
<li>估计: 由数据进行推断</li>
</ul>
</blockquote>
</li>
</ul>
<hr>
<a id="more"></a>
<h3 id="描述性统计"><a href="#描述性统计" class="headerlink" title="描述性统计"></a>描述性统计</h3><h4 id="集中趋势"><a href="#集中趋势" class="headerlink" title="集中趋势"></a>集中趋势</h4><blockquote>
<p>中心测量值 –&gt; 数据集中趋势的度量</p>
<ul>
<li>众数: x轴上最高频率所对应的值（多众数无意义）</li>
<li>中位数: 按顺序排列数据, 最中间的一位或者两位的平均数，包含异常值时，比均值更适合</li>
<li>均值:算数平均数、调整平均数(去掉最大最小值)、加权平均数、几何平均数(几个数值[乘积]的[n次方根])</li>
<li>分位数: 百分位数、四分位数(Q1、Q2、Q3, 即第25，50，75百分位数)</li>
</ul>
</blockquote>
<h4 id="变异程度的度量"><a href="#变异程度的度量" class="headerlink" title="变异程度的度量"></a>变异程度的度量</h4><blockquote>
<p>数据离散程度的度量</p>
<ul>
<li>极差: max-min</li>
<li>四分位数间距(IQR): IQR = Q3 - Q1（中间50%数据的极差）</li>
<li>方差: [离差]平方求和的均值 //TODO: 公式: 总体方差与样本方差</li>
<li>标准偏差: 方差的正平方根（与原始数据的[单位度量]相同, 易于比较和解释）</li>
</ul>
</blockquote>
<h4 id="分布形态的度量"><a href="#分布形态的度量" class="headerlink" title="分布形态的度量"></a>分布形态的度量</h4><blockquote>
<p>偏度: 偏斜方向和程度(相对于正态分布)</p>
<ul>
<li>对称分布: 众数 = 中位数 = 均值</li>
<li>正偏斜分布: 众数 &lt; 中位数 &lt; 均值</li>
<li>负偏斜分布</li>
</ul>
</blockquote>
<h3 id="归一化"><a href="#归一化" class="headerlink" title="归一化"></a>归一化</h3><blockquote>
<p>数据归一化（标准化）是机器学习/数据挖掘的一项基础工作，是数据预处理的重要一步。样本各个特征往往具有不同的分布范围，通过归一化将各个维度的特征值映射到相同区间，使得各特征值具有相同量纲，处于同一数量级。</p>
</blockquote>
<h5 id="归一化的方法"><a href="#归一化的方法" class="headerlink" title="归一化的方法"></a>归一化的方法</h5><ol>
<li><p><strong>min-miax归一化</strong></p>
<p> 对各维特征值分别进行线性变换，使得各维特征值被映射到[0, 1]之间，转换函数如下：</p>
 <center><img src="http://upload-images.jianshu.io/upload_images/5584618-56fbfd8270a2afd5.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="数据归一化"><br> min-max归一化转换函数</center>

<p> 其中max为某一维特征值的最大值，min为某一维特征值的最小值。这种方法有个缺陷就是当有新样本加入时，可能导致max和min的变化，需要重新定义。</p>
</li>
<li><p><strong>z-score归一化</strong></p>
<p> 这种方法用各维的均值和标准差来归一化各维特征值，它的转换函数为：</p>
 <center><img src="http://upload-images.jianshu.io/upload_images/5584618-cb376c235f808bc7.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="机器学习之归一化"><br> z-score归一化转换函数</center>

<p> 经过处理后，各维特征值符合标准正态分布。<br> 标准正态分布：曲线下方的面积是1;  众数=中位数=平均数, 关于均值左右对称<br> 其中，μ为所有样本数据的均值，σ为所有样本数据的标准差。</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;统计方法&quot;&gt;&lt;a href=&quot;#统计方法&quot; class=&quot;headerlink&quot; title=&quot;统计方法&quot;&gt;&lt;/a&gt;统计方法&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;许多场景下经常会根据所谓的&lt;em&gt;经验之谈&lt;/em&gt;来对某些事件总结观点获得结论。所谓的&lt;em&gt;经验之谈&lt;/em&gt;在非正式场合下，这类说辞没有太大的问题，然后大多数时候，我们需要有说服力的正经以及可靠的结论，经验之谈明显不能做到这一点。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;经验之谈的缺点(同事也是影响有效调查的因素)：&lt;ul&gt;
&lt;li&gt;观察数量少&lt;/li&gt;
&lt;li&gt;数据的选择性偏差&lt;/li&gt;
&lt;li&gt;确认偏差(一部分提供支持示例，一部分引用反例）&lt;/li&gt;
&lt;li&gt;数据的不准确&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;统计方法的手段&lt;/strong&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;收集数据: 使用大型的调查数据，这些往往是为了得出某个结论进行可靠地统计推断专门收集而来&lt;/li&gt;
&lt;li&gt;描述性统计: 计算能总计数据的统计量, 评测各种数据的可视化方法（表格图形法）&lt;/li&gt;
&lt;li&gt;探索性数据分析: 寻找模式、差异和其它能解决我们疑问的特征。同时检查不一致性，确认其局限性- 假设检验&lt;/li&gt;
&lt;li&gt;估计: 由数据进行推断&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="数据分析" scheme="http://yoursite.com/categories/dataAnalysis/"/>
    
    
      <category term="数据分析" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>python代码优化</title>
    <link href="http://yoursite.com/2017/08/07/python%E4%BB%A3%E7%A0%81%E4%BC%98%E5%8C%96/"/>
    <id>http://yoursite.com/2017/08/07/python代码优化/</id>
    <published>2017-08-07T01:44:24.000Z</published>
    <updated>2017-08-08T07:57:55.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="变量交换"><a href="#变量交换" class="headerlink" title="变量交换"></a>变量交换</h4><hr>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 大部分编程语言交换两个值需要引入临时变量进行书写</span></div><div class="line">a, b = <span class="number">1</span>, <span class="number">2</span></div><div class="line"><span class="comment"># pythonic 写法</span></div><div class="line">a, b = b, a</div><div class="line"><span class="keyword">print</span> a, b</div></pre></td></tr></table></figure>
<pre><code>2 1
</code></pre><h4 id="循环遍历区间元素"><a href="#循环遍历区间元素" class="headerlink" title="循环遍历区间元素"></a>循环遍历区间元素</h4><hr>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">li = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)]</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> li:</div><div class="line">    <span class="keyword">print</span> i</div><div class="line"><span class="comment"># 或者</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(li)):</div><div class="line">    <span class="keyword">print</span> li[i]</div><div class="line">    </div><div class="line"><span class="comment"># pythonic 写法</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">6</span>):</div><div class="line">    <span class="keyword">print</span> i</div></pre></td></tr></table></figure>
<p>在python2中，xrang返回的是生成器对象， range返回的是列表对象，生成器对象比列表更节约内存，python3中只有range方法，直接返回生成器对象<br><a id="more"></a></p>
<h4 id="带有索引位置的接遍历"><a href="#带有索引位置的接遍历" class="headerlink" title="带有索引位置的接遍历"></a>带有索引位置的接遍历</h4><hr>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">colors = [<span class="string">'red'</span>, <span class="string">'yellow'</span>, <span class="string">'black'</span>, <span class="string">'blue'</span>, <span class="string">'grey'</span>]</div><div class="line"><span class="comment"># 遍历集合时如果需要使用到集合的索引位置时，直接对集合迭代是没有索引信息的</span></div><div class="line"><span class="keyword">for</span> index <span class="keyword">in</span> range(len(colors)):</div><div class="line">    <span class="keyword">print</span> index, <span class="string">'-&gt;'</span>, colors[index]</div><div class="line"></div><div class="line"><span class="comment"># pythonic 写法</span></div><div class="line"><span class="keyword">for</span> index, color <span class="keyword">in</span> enumerate(colors):</div><div class="line">    <span class="keyword">print</span> index, color</div></pre></td></tr></table></figure>
<pre><code>0 -&gt; red
1 -&gt; yellow
2 -&gt; black
3 -&gt; blue
4 -&gt; grey
0 red
1 yellow
2 black
3 blue
4 grey
</code></pre><h4 id="字符串连接与拆分"><a href="#字符串连接与拆分" class="headerlink" title="字符串连接与拆分"></a>字符串连接与拆分</h4><hr>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 字符串连接普通方式是可以用 + 操作</span></div><div class="line">words = [<span class="string">'Thank'</span>, <span class="string">'you'</span>, <span class="string">'for'</span>, <span class="string">'your'</span>, <span class="string">'resubmission'</span>]</div><div class="line">s = words[<span class="number">0</span>]</div><div class="line"><span class="keyword">for</span> word <span class="keyword">in</span> words[<span class="number">1</span>:]:</div><div class="line">    s += <span class="string">' '</span> + word</div><div class="line"><span class="keyword">print</span> s</div><div class="line"></div><div class="line"><span class="comment"># pythonic 写法</span></div><div class="line"><span class="keyword">print</span> <span class="string">' '</span>.join(words)</div><div class="line"></div><div class="line"><span class="comment"># 字符串拆分</span></div><div class="line"><span class="keyword">print</span> s.split(<span class="string">' '</span>)</div><div class="line"><span class="comment"># +每使用一次在内存中将生成一个新的字符串对象，造成无谓的内存浪费， join整个过程只会产生一个字符串对象</span></div></pre></td></tr></table></figure>
<pre><code>Thank you for your resubmission
Thank you for your resubmission
[&apos;Thank&apos;, &apos;you&apos;, &apos;for&apos;, &apos;your&apos;, &apos;resubmission&apos;]
</code></pre><h4 id="打开、关闭文件"><a href="#打开、关闭文件" class="headerlink" title="打开、关闭文件"></a>打开、关闭文件</h4><hr>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 执行文件操作时，最后必须进行文件的close操作，即使有异常，普通的方式是在finnally中显示的调用close方法</span></div><div class="line">f = open(<span class="string">'text.txt'</span>)</div><div class="line"><span class="keyword">try</span>:</div><div class="line">    data = f.read()</div><div class="line"><span class="keyword">finally</span>:</div><div class="line">    f.close()</div><div class="line"></div><div class="line"><span class="comment"># pythonic 写法</span></div><div class="line"><span class="keyword">with</span> open(<span class="string">'text.txt'</span>) <span class="keyword">as</span> f:</div><div class="line">    data = f.read()</div><div class="line"><span class="comment"># 使用with关键字，系统会在执行完文件操作对象，自动关闭文件对象</span></div></pre></td></tr></table></figure>
<h4 id="列表推导式"><a href="#列表推导式" class="headerlink" title="列表推导式"></a>列表推导式</h4><hr>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 普通生产列表的方式</span></div><div class="line">res = []</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</div><div class="line">    res.append(i)</div><div class="line"><span class="keyword">print</span> res</div><div class="line"></div><div class="line"><span class="comment"># pythonic 写法</span></div><div class="line"><span class="comment"># 生成 0-3的列表</span></div><div class="line"><span class="keyword">print</span> [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>)]</div><div class="line"><span class="comment"># 生成 0-3 的奇数列表</span></div><div class="line"><span class="keyword">print</span> [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>) <span class="keyword">if</span> i%<span class="number">2</span> != <span class="number">0</span>]</div></pre></td></tr></table></figure>
<pre><code>[0, 1, 2, 3]
[0, 1, 2, 3]
[1, 3]
</code></pre><h4 id="链式比较操作"><a href="#链式比较操作" class="headerlink" title="链式比较操作"></a>链式比较操作</h4><hr>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">age = <span class="number">18</span></div><div class="line"><span class="keyword">if</span> age &gt; <span class="number">15</span> <span class="keyword">and</span> age &lt; <span class="number">60</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">'younger'</span></div><div class="line"></div><div class="line"><span class="comment"># pythonic 写法</span></div><div class="line"><span class="keyword">if</span> <span class="number">15</span> &lt; age &lt; <span class="number">60</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">'younger'</span></div><div class="line">    </div><div class="line"><span class="comment"># 链式操作</span></div><div class="line"><span class="keyword">False</span> == <span class="keyword">False</span> == <span class="keyword">True</span></div><div class="line"><span class="comment">#out: False</span></div></pre></td></tr></table></figure>
<pre><code>younger
younger
False
</code></pre><h4 id="三目运算符"><a href="#三目运算符" class="headerlink" title="三目运算符"></a>三目运算符</h4><hr>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 在c语言或者其它语言中有三目运算符‘:’</span></div><div class="line"><span class="comment"># 但是在Python之禅中: “There should be one— and preferably only one —obvious way to do it. ”。能用if else表达清楚逻辑运算，不需要增加另外一种方式</span></div><div class="line">b = <span class="number">1</span></div><div class="line">text = <span class="string">'true'</span> <span class="keyword">if</span> b == <span class="number">1</span> <span class="keyword">else</span> <span class="string">'false'</span></div><div class="line"><span class="keyword">print</span> text</div></pre></td></tr></table></figure>
<pre><code>true
</code></pre><h4 id="else语句"><a href="#else语句" class="headerlink" title="else语句"></a>else语句</h4><hr>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 在python中，除了if外，其它的循环语句都有else语句  </span></div><div class="line"><span class="comment">#pythonic 写法</span></div><div class="line"><span class="keyword">while</span> <span class="keyword">False</span>:</div><div class="line">    <span class="keyword">pass</span></div><div class="line"><span class="keyword">else</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">'while'</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>):</div><div class="line">    <span class="keyword">pass</span></div><div class="line"><span class="keyword">else</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">'for'</span></div></pre></td></tr></table></figure>
<pre><code>while
for
</code></pre><h4 id="字符串格式化"><a href="#字符串格式化" class="headerlink" title="字符串格式化"></a>字符串格式化</h4><hr>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 字符串格式化拼接方式</span></div><div class="line">str1 = <span class="string">"preferably"</span></div><div class="line">str2 = <span class="string">"obvious way"</span></div><div class="line">str3 = <span class="string">"There should be one— and %s only one —%s to do it. "</span> % (str1, str2)</div><div class="line"></div><div class="line"><span class="comment"># pythonic 写法</span></div><div class="line">str4 = <span class="string">"There should be one— and &#123;s1&#125; only one —&#123;s2&#125; to do it. "</span>.format(s1=str1, s2 = str2)</div><div class="line"></div><div class="line"><span class="comment">#很难确定用format比%s代码量更少, 但是往往format方式更易于代码的理解</span></div><div class="line"><span class="keyword">print</span> str3</div><div class="line"><span class="keyword">print</span> str4</div></pre></td></tr></table></figure>
<pre><code>There should be one— and preferably only one —obvious way to do it. 
There should be one— and preferably only one —obvious way to do it. 
</code></pre><h4 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h4><hr>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 生成斐波拉契数列</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span>:</span></div><div class="line">    a, b = <span class="number">0</span>, <span class="number">1</span></div><div class="line">    res = []</div><div class="line">    <span class="keyword">while</span> b &lt; n:</div><div class="line">        res.append(b)</div><div class="line">        a, b = b, a+b</div><div class="line">    <span class="keyword">return</span> res</div><div class="line"></div><div class="line"><span class="comment"># pythonic 写法</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib2</span><span class="params">(n)</span>:</span></div><div class="line">    a, b = <span class="number">0</span>, <span class="number">1</span></div><div class="line">    <span class="keyword">while</span> a &lt; n:</div><div class="line">        <span class="keyword">yield</span> a</div><div class="line">        a, b = b, a + b</div><div class="line"></div><div class="line"><span class="comment"># 生成器的好处在于无需一次将所有的数据放入内存中，只有迭代元素时才返回该元素，列表是预先一次性将所有元素加载入内存，</span></div><div class="line"><span class="keyword">print</span> fib(<span class="number">5</span>)[<span class="number">2</span>]</div><div class="line"><span class="keyword">for</span> item <span class="keyword">in</span> fib2(<span class="number">5</span>):</div><div class="line">    <span class="keyword">print</span> item</div></pre></td></tr></table></figure>
<pre><code>2
0
1
1
2
3
</code></pre><h4 id="字典元素获取与预设字典值"><a href="#字典元素获取与预设字典值" class="headerlink" title="字典元素获取与预设字典值"></a>字典元素获取与预设字典值</h4><hr>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 1&gt; 字典元素的获取 </span></div><div class="line">dic = &#123;<span class="string">'name'</span>: <span class="string">'foo'</span>&#125;</div><div class="line"><span class="keyword">if</span> dic.has_key(<span class="string">'name'</span>):</div><div class="line">    <span class="keyword">print</span> dic[<span class="string">'name'</span>]</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">'unknow'</span></div><div class="line"></div><div class="line"><span class="comment"># pythonic</span></div><div class="line"><span class="keyword">print</span> dic.get(<span class="string">'name'</span>, <span class="string">'unknow'</span>)</div><div class="line"></div><div class="line"><span class="comment"># 2&gt; 预设字典默认值</span></div><div class="line"><span class="comment"># 通过 key 分组的时候，不得不每次检查 key 是否已经存在于字典中。</span></div><div class="line">data = [(<span class="string">'foo'</span>, <span class="number">10</span>), (<span class="string">'bar'</span>, <span class="number">20</span>), (<span class="string">'foo'</span>, <span class="number">39</span>), (<span class="string">'bar'</span>, <span class="number">49</span>)]</div><div class="line">groups = &#123;&#125;</div><div class="line"><span class="keyword">for</span> (key, value) <span class="keyword">in</span> data:</div><div class="line">    <span class="keyword">if</span> key <span class="keyword">in</span> groups:</div><div class="line">        groups[key].append(value)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        groups[key] = [value]</div><div class="line"></div><div class="line"><span class="comment"># pythonic 写法</span></div><div class="line"><span class="comment"># 第一种方式</span></div><div class="line">groups2 = &#123;&#125;</div><div class="line"><span class="keyword">for</span> (key, value) <span class="keyword">in</span> data:</div><div class="line">    groups2.setdefault(key, []).append(value)</div><div class="line"></div><div class="line"><span class="comment"># 第二种方式</span></div><div class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</div><div class="line">groups3 = defaultdict(list)</div><div class="line"><span class="keyword">for</span> (key, value) <span class="keyword">in</span> data:</div><div class="line">    groups3[key].append(value)  </div><div class="line"></div><div class="line"><span class="keyword">print</span> groups</div><div class="line"><span class="keyword">print</span> groups2</div><div class="line"><span class="keyword">print</span> groups3</div></pre></td></tr></table></figure>
<pre><code>foo
foo
{&apos;foo&apos;: [10, 39], &apos;bar&apos;: [20, 49]}
{&apos;foo&apos;: [10, 39], &apos;bar&apos;: [20, 49]}
defaultdict(&lt;type &apos;list&apos;&gt;, {&apos;foo&apos;: [10, 39], &apos;bar&apos;: [20, 49]})
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;变量交换&quot;&gt;&lt;a href=&quot;#变量交换&quot; class=&quot;headerlink&quot; title=&quot;变量交换&quot;&gt;&lt;/a&gt;变量交换&lt;/h4&gt;&lt;hr&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 大部分编程语言交换两个值需要引入临时变量进行书写&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;a, b = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# pythonic 写法&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;a, b = b, a&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; a, b&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;pre&gt;&lt;code&gt;2 1
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;循环遍历区间元素&quot;&gt;&lt;a href=&quot;#循环遍历区间元素&quot; class=&quot;headerlink&quot; title=&quot;循环遍历区间元素&quot;&gt;&lt;/a&gt;循环遍历区间元素&lt;/h4&gt;&lt;hr&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;li = [i &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;)]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; li:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; i&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 或者&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(len(li)):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; li[i]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# pythonic 写法&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; xrange(&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; i&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在python2中，xrang返回的是生成器对象， range返回的是列表对象，生成器对象比列表更节约内存，python3中只有range方法，直接返回生成器对象&lt;br&gt;
    
    </summary>
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="机器学习" scheme="http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>category/DataAnalysis</title>
    <link href="http://yoursite.com/2017/07/26/descriptionStatistics/"/>
    <id>http://yoursite.com/2017/07/26/descriptionStatistics/</id>
    <published>2017-07-26T06:34:48.000Z</published>
    <updated>2017-08-07T02:10:29.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="描述性统计-数值方法"><a href="#描述性统计-数值方法" class="headerlink" title="描述性统计-数值方法"></a>描述性统计-数值方法</h2><h4 id="中心位置的度量"><a href="#中心位置的度量" class="headerlink" title="中心位置的度量"></a>中心位置的度量</h4><ul>
<li>平均数: 是一种数据位置的度量，用以了解整体数据，平均数分为:<ol>
<li>算数平均数: 适用于普通简单的较直观的表现中心位置</li>
<li>调整平均数: 删除p%大、小的数据后进行计算算数平均数</li>
<li>加权平均数(每个数据有权值)</li>
<li>几何平均数:当数据呈倍数关系或不对称分布时（增长率或生长率、动态发展速度）</li>
</ol>
</li>
<li>平均数很容易受到极值的影响，因为数据并不能保证不存在异常的数据点。又是可以采用调整平均数计算平均数</li>
<li>中位数: 数据进行升序排序后，位于中间的数值。当数据存在异常点的时候，中位数比均值更适合衡量</li>
<li>众数: 数据集中出现次数最多的数据，代表数据的一般水平，当众数有多个时，称为多众数。多众数一般无意义。</li>
<li>分位数: 百分位数</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;描述性统计-数值方法&quot;&gt;&lt;a href=&quot;#描述性统计-数值方法&quot; class=&quot;headerlink&quot; title=&quot;描述性统计-数值方法&quot;&gt;&lt;/a&gt;描述性统计-数值方法&lt;/h2&gt;&lt;h4 id=&quot;中心位置的度量&quot;&gt;&lt;a href=&quot;#中心位置的度量&quot; class
    
    </summary>
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习" scheme="http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>二十三年过往喧嚣</title>
    <link href="http://yoursite.com/2017/07/26/%E8%BF%87%E5%BE%80%E5%96%A7%E5%9A%A3/"/>
    <id>http://yoursite.com/2017/07/26/过往喧嚣/</id>
    <published>2017-07-26T00:36:20.000Z</published>
    <updated>2017-07-27T03:24:18.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://fsv.cmoney.tw/cmstatic/notes/capture/232701/20150827180432193.jpg" alt="人生"><br><code>过去就像回形针，把青春一页页的固定，然后变成了一本不被出版的书。</code></p>
<p>&emsp;&emsp;决定开始写下这第一篇博客时，或许是对自己人生的一种感悟，感悟过往种种，又或许是想要转变，思考过去二十几年的岁月。</p>
<a id="more"></a>
<p>&emsp;&emsp;回首过往的二十几年，有时很怀恋，怀恋过往青春，有时很憎恨，憎恨传统对人生带来的影响。但是不管怎么说，二十多年我挺过来了。现在仔细想想过去的生活，发现之前从来没有明白<em>未来</em>是什么意思。儿时的记忆没有太多，几乎都是三五个小伙伴四处疯、野的记忆，完全没有想过将来自己需要承担的东西很多很多。当踏入教室的那一刻起，不知不觉的，思想开始潜移默化的改变了，开始有了一种在笼子里太久了，厌倦了笼子里一成不变的生活，好想出去看看的感觉，但是那一刻认为，想要走出去，认为唯一的办法就是读书。但是后来发现，当我选择了读书的那一刻，一切的性质都变了 – 周围的目光，家庭的压力。还好在最后书没读好，但是还是走出去了，坚持到了大学，但是那些压力也给我自己造成了许多的心里创伤。</p>
<h2 id="未来"><a href="#未来" class="headerlink" title="未来"></a>未来</h2><p>&emsp;&emsp; 高中应该是对于学生来说最美好的时段，同时也是最有价值的时段，但是不幸，我没有完全融入那段生活，但是多多少少也有点高中时期的美好，现在还是挺怀恋的，但是更多的是遗憾。但是到了大学，自由、放纵占据了生活，终于不用整天去面对繁重的书本，沉重的压力去学习，从来没有想过该去做些有价值的事情，将时间投入到什么地方。直到大三开始，才开始真正的思考，工作、就业的问题，才开始思考我未来需要的是什么，在哪里，当我走出校园的那一刻，我是以什么样的角色去立足于这个社会，甚至在毕业几年后自己何去何从，那个时候开始就自己的专业方向开始定位自己的角色，但是不幸，对社会认知理念太少，稀里糊涂的选择程序员的某个方向，直到今天，才开始重新定位自己、审视自己</p>
<p>&emsp;&emsp; 在学生时期很内向，脾气怪异，甚至是孤僻，社交活动很少，甚至不明白还有人心叵测这一说，现在回看，发现自己处于自己的内心时间，挥霍了太多青春，同时也失去了太多的改变自己的机遇。大学毕业的这一年，我也挥霍了一次青春，这是我最后悔的一次挥霍，这一次让我深深的需要深刻的反省自己，才让我进入那早该进入的性格改变期，改变自己挥霍时间、挥霍青春的性格，改变自己高傲、孤僻的性格，这一刻，认识到，真的需要踏出去了，能力很重要。</p>
<h2 id="自省"><a href="#自省" class="headerlink" title="自省"></a>自省</h2><h4 id="自省-1"><a href="#自省-1" class="headerlink" title="自省"></a>自省</h4><p>&emsp;&emsp;认识自己的问题才能更好的解决问题。反思自己现在的态度与行为，是否有积极主动的学？抱着什么样的念头去学？是否还在用别人的标准来衡量自己？是否还在为鸡毛蒜皮的是烦恼，不知轻重？</p>
<p>&emsp;&emsp;当今天重新审视自己的问题的时候，发现确确实实的存在这些问题，漫无目的的学，没有规划性的学习，内心强大的攀比心理，经常不知事情轻重。这一刻才明白体会到自律与自控力的重要，优秀需要一点点的积累，无法一步青云，术业有专攻。</p>
<h4 id="读书"><a href="#读书" class="headerlink" title="读书"></a>读书</h4><p>&emsp;&emsp;现在每天都有读书的习惯，目前所看的书有技术方向、软技能方面的书，但是在读过一本书之后，是否有真正的理解书本的技巧，是否真的的有自己的理解，这也是开始写博客的初衷之一，只有记录，才能明白自己从读书里面真正的学到了什么，理解了什么。</p>
<h4 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h4><p>&emsp;&emsp;开始这篇博客，就需要时刻记录自己的成长。写作需要深度思考，对文字的灵活运用能力，甚至在职场中，写作仍然是一种非常重要的能力。程序员的技术性文档，源码阅读后的深思理解记录，软件使用文档，技术书籍的读后感。</p>
<h4 id="社交"><a href="#社交" class="headerlink" title="社交"></a>社交</h4><p>&emsp;&emsp;直到准备写这个地方的时候，才在深深的思考，社交是什么，甚至是询问自己，你有社交能力吗？社交需要走出去，用心去聆听，用心去体会，甚至是用心的去交流，情绪与性格会影响社交能力，需要调整心情，转变性格，平易近人。</p>
<h4 id="锻炼"><a href="#锻炼" class="headerlink" title="锻炼"></a>锻炼</h4><p>&emsp;&emsp;成功需要身体作为基础，不然真的可能最后学习的内容是颈椎病康复指南，久坐的人一般都是出于亚健康状态，每周三两次锻炼或者周末骑行都是锻炼的一种方式。</p>
<h4 id="技术方向"><a href="#技术方向" class="headerlink" title="技术方向"></a>技术方向</h4><p>&emsp;&emsp;省视自己过往二十几年的时间，最后悔的就是技术问题，很后悔在大学期间没有认真学好数学与计算机相关的理论知识，甚至是没有一门精通性的语言。大学主要课程语言是C/C++，大学的放纵，让我成功的避过了学好这些课程最好的时机，现在只能回头恶补，每一门技术方向，基础或许很简单，但是开始深入学习所选择的技术方向的时候，需要询问自己基础是否融会贯通。技术方向固然很重要，但是基础是技术的基石，根基不稳，技术也不会理解太通彻。</p>
<h4 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h4><p>&emsp;&emsp;英语是现在头疼的一点，当真正省视技术方向时，发现大多的文档都是英语文档，甚至现在很多前沿技术性的文档也是英语文档，或许可以等待翻译，但是翻译周期长，甚至翻译的文档往往带有翻译者的个人看法在里面，同一篇文章，十个人读有十种不同的感悟。背单词、听、说、读、写，现在将这些所谓的后悔转变成现在去学习的动力，开启自己计划学习。</p>
<hr>
<p>&emsp;&emsp;今天，在这里记录下自己对过往的总结，对现如今生活的不满意，接下来，就该用自己的整个人生去为自己拼搏，相信总会有成功的一天。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://fsv.cmoney.tw/cmstatic/notes/capture/232701/20150827180432193.jpg&quot; alt=&quot;人生&quot;&gt;&lt;br&gt;&lt;code&gt;过去就像回形针，把青春一页页的固定，然后变成了一本不被出版的书。&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;决定开始写下这第一篇博客时，或许是对自己人生的一种感悟，感悟过往种种，又或许是想要转变，思考过去二十几年的岁月。&lt;/p&gt;
    
    </summary>
    
      <category term="记录" scheme="http://yoursite.com/categories/%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="博客" scheme="http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="记录" scheme="http://yoursite.com/tags/%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
</feed>
