<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[数据分析]]></title>
    <url>%2F2017%2F08%2F07%2F%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%2F</url>
    <content type="text"><![CDATA[统计方法 许多场景下经常会根据所谓的经验之谈来对某些事件总结观点获得结论。所谓的经验之谈在非正式场合下，这类说辞没有太大的问题，然后大多数时候，我们需要有说服力的正经以及可靠的结论，经验之谈明显不能做到这一点。 经验之谈的缺点(同事也是影响有效调查的因素)： 观察数量少 数据的选择性偏差 确认偏差(一部分提供支持示例，一部分引用反例） 数据的不准确 统计方法的手段 收集数据: 使用大型的调查数据，这些往往是为了得出某个结论进行可靠地统计推断专门收集而来 描述性统计: 计算能总计数据的统计量, 评测各种数据的可视化方法（表格图形法） 探索性数据分析: 寻找模式、差异和其它能解决我们疑问的特征。同时检查不一致性，确认其局限性- 假设检验 估计: 由数据进行推断 描述性统计集中趋势 中心测量值 –&gt; 数据集中趋势的度量 众数: x轴上最高频率所对应的值（多众数无意义） 中位数: 按顺序排列数据, 最中间的一位或者两位的平均数，包含异常值时，比均值更适合 均值:算数平均数、调整平均数(去掉最大最小值)、加权平均数、几何平均数(几个数值[乘积]的[n次方根]) 分位数: 百分位数、四分位数(Q1、Q2、Q3, 即第25，50，75百分位数) 变异程度的度量 数据离散程度的度量 极差: max-min 四分位数间距(IQR): IQR = Q3 - Q1（中间50%数据的极差） 方差: [离差]平方求和的均值 //TODO: 公式: 总体方差与样本方差 标准偏差: 方差的正平方根（与原始数据的[单位度量]相同, 易于比较和解释） 分布形态的度量 偏度: 偏斜方向和程度(相对于正态分布) 对称分布: 众数 = 中位数 = 均值 正偏斜分布: 众数 &lt; 中位数 &lt; 均值 负偏斜分布 归一化 数据归一化（标准化）是机器学习/数据挖掘的一项基础工作，是数据预处理的重要一步。样本各个特征往往具有不同的分布范围，通过归一化将各个维度的特征值映射到相同区间，使得各特征值具有相同量纲，处于同一数量级。 归一化的方法 min-miax归一化 对各维特征值分别进行线性变换，使得各维特征值被映射到[0, 1]之间，转换函数如下： min-max归一化转换函数 其中max为某一维特征值的最大值，min为某一维特征值的最小值。这种方法有个缺陷就是当有新样本加入时，可能导致max和min的变化，需要重新定义。 z-score归一化 这种方法用各维的均值和标准差来归一化各维特征值，它的转换函数为： z-score归一化转换函数 经过处理后，各维特征值符合标准正态分布。 标准正态分布：曲线下方的面积是1; 众数=中位数=平均数, 关于均值左右对称 其中，μ为所有样本数据的均值，σ为所有样本数据的标准差。]]></content>
      <categories>
        <category>数据分析</category>
      </categories>
      <tags>
        <tag>数据分析</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python代码优化]]></title>
    <url>%2F2017%2F08%2F07%2Fpython%E4%BB%A3%E7%A0%81%E4%BC%98%E5%8C%96%2F</url>
    <content type="text"><![CDATA[变量交换 12345# 大部分编程语言交换两个值需要引入临时变量进行书写a, b = 1, 2# pythonic 写法a, b = b, aprint a, b 2 1 循环遍历区间元素 12345678910li = [i for i in range(10)]for i in li: print i# 或者for i in range(len(li)): print li[i] # pythonic 写法for i in xrange(6): print i 在python2中，xrang返回的是生成器对象， range返回的是列表对象，生成器对象比列表更节约内存，python3中只有range方法，直接返回生成器对象 带有索引位置的接遍历 12345678colors = ['red', 'yellow', 'black', 'blue', 'grey']# 遍历集合时如果需要使用到集合的索引位置时，直接对集合迭代是没有索引信息的for index in range(len(colors)): print index, '-&gt;', colors[index]# pythonic 写法for index, color in enumerate(colors): print index, color 0 -&gt; red 1 -&gt; yellow 2 -&gt; black 3 -&gt; blue 4 -&gt; grey 0 red 1 yellow 2 black 3 blue 4 grey 字符串连接与拆分 12345678910111213# 字符串连接普通方式是可以用 + 操作words = ['Thank', 'you', 'for', 'your', 'resubmission']s = words[0]for word in words[1:]: s += ' ' + wordprint s# pythonic 写法print ' '.join(words)# 字符串拆分print s.split(' ')# +每使用一次在内存中将生成一个新的字符串对象，造成无谓的内存浪费， join整个过程只会产生一个字符串对象 Thank you for your resubmission Thank you for your resubmission [&apos;Thank&apos;, &apos;you&apos;, &apos;for&apos;, &apos;your&apos;, &apos;resubmission&apos;] 打开、关闭文件 1234567891011# 执行文件操作时，最后必须进行文件的close操作，即使有异常，普通的方式是在finnally中显示的调用close方法f = open('text.txt')try: data = f.read()finally: f.close()# pythonic 写法with open('text.txt') as f: data = f.read()# 使用with关键字，系统会在执行完文件操作对象，自动关闭文件对象 列表推导式 1234567891011# 普通生产列表的方式res = []for i in range(4): res.append(i)print res# pythonic 写法# 生成 0-3的列表print [i for i in range(4)]# 生成 0-3 的奇数列表print [i for i in range(4) if i%2 != 0] [0, 1, 2, 3] [0, 1, 2, 3] [1, 3] 链式比较操作 1234567891011age = 18if age &gt; 15 and age &lt; 60: print 'younger'# pythonic 写法if 15 &lt; age &lt; 60: print 'younger' # 链式操作False == False == True#out: False younger younger False 三目运算符 12345# 在c语言或者其它语言中有三目运算符‘:’# 但是在Python之禅中: “There should be one— and preferably only one —obvious way to do it. ”。能用if else表达清楚逻辑运算，不需要增加另外一种方式b = 1text = 'true' if b == 1 else 'false'print text true else语句 1234567891011# 在python中，除了if外，其它的循环语句都有else语句 #pythonic 写法while False: passelse: print 'while'for i in range(1): passelse: print 'for' while for 字符串格式化 1234567891011# 字符串格式化拼接方式str1 = "preferably"str2 = "obvious way"str3 = "There should be one— and %s only one —%s to do it. " % (str1, str2)# pythonic 写法str4 = "There should be one— and &#123;s1&#125; only one —&#123;s2&#125; to do it. ".format(s1=str1, s2 = str2)#很难确定用format比%s代码量更少, 但是往往format方式更易于代码的理解print str3print str4 There should be one— and preferably only one —obvious way to do it. There should be one— and preferably only one —obvious way to do it. 生成器 1234567891011121314151617181920# 生成斐波拉契数列def fib(n): a, b = 0, 1 res = [] while b &lt; n: res.append(b) a, b = b, a+b return res# pythonic 写法def fib2(n): a, b = 0, 1 while a &lt; n: yield a a, b = b, a + b# 生成器的好处在于无需一次将所有的数据放入内存中，只有迭代元素时才返回该元素，列表是预先一次性将所有元素加载入内存，print fib(5)[2]for item in fib2(5): print item 2 0 1 1 2 3 字典元素获取与预设字典值 1234567891011121314151617181920212223242526272829303132333435# 1&gt; 字典元素的获取 dic = &#123;'name': 'foo'&#125;if dic.has_key('name'): print dic['name']else: print 'unknow'# pythonicprint dic.get('name', 'unknow')# 2&gt; 预设字典默认值# 通过 key 分组的时候，不得不每次检查 key 是否已经存在于字典中。data = [('foo', 10), ('bar', 20), ('foo', 39), ('bar', 49)]groups = &#123;&#125;for (key, value) in data: if key in groups: groups[key].append(value) else: groups[key] = [value]# pythonic 写法# 第一种方式groups2 = &#123;&#125;for (key, value) in data: groups2.setdefault(key, []).append(value)# 第二种方式from collections import defaultdictgroups3 = defaultdict(list)for (key, value) in data: groups3[key].append(value) print groupsprint groups2print groups3 foo foo {&apos;foo&apos;: [10, 39], &apos;bar&apos;: [20, 49]} {&apos;foo&apos;: [10, 39], &apos;bar&apos;: [20, 49]} defaultdict(&lt;type &apos;list&apos;&gt;, {&apos;foo&apos;: [10, 39], &apos;bar&apos;: [20, 49]})]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[category/DataAnalysis]]></title>
    <url>%2F2017%2F07%2F26%2FdescriptionStatistics%2F</url>
    <content type="text"><![CDATA[描述性统计-数值方法中心位置的度量 平均数: 是一种数据位置的度量，用以了解整体数据，平均数分为: 算数平均数: 适用于普通简单的较直观的表现中心位置 调整平均数: 删除p%大、小的数据后进行计算算数平均数 加权平均数(每个数据有权值) 几何平均数:当数据呈倍数关系或不对称分布时（增长率或生长率、动态发展速度） 平均数很容易受到极值的影响，因为数据并不能保证不存在异常的数据点。又是可以采用调整平均数计算平均数 中位数: 数据进行升序排序后，位于中间的数值。当数据存在异常点的时候，中位数比均值更适合衡量 众数: 数据集中出现次数最多的数据，代表数据的一般水平，当众数有多个时，称为多众数。多众数一般无意义。 分位数: 百分位数]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[二十三年过往喧嚣]]></title>
    <url>%2F2017%2F07%2F26%2F%E8%BF%87%E5%BE%80%E5%96%A7%E5%9A%A3%2F</url>
    <content type="text"><![CDATA[过去就像回形针，把青春一页页的固定，然后变成了一本不被出版的书。 &emsp;&emsp;决定开始写下这第一篇博客时，或许是对自己人生的一种感悟，感悟过往种种，又或许是想要转变，思考过去二十几年的岁月。 &emsp;&emsp;回首过往的二十几年，有时很怀恋，怀恋过往青春，有时很憎恨，憎恨传统对人生带来的影响。但是不管怎么说，二十多年我挺过来了。现在仔细想想过去的生活，发现之前从来没有明白未来是什么意思。儿时的记忆没有太多，几乎都是三五个小伙伴四处疯、野的记忆，完全没有想过将来自己需要承担的东西很多很多。当踏入教室的那一刻起，不知不觉的，思想开始潜移默化的改变了，开始有了一种在笼子里太久了，厌倦了笼子里一成不变的生活，好想出去看看的感觉，但是那一刻认为，想要走出去，认为唯一的办法就是读书。但是后来发现，当我选择了读书的那一刻，一切的性质都变了 – 周围的目光，家庭的压力。还好在最后书没读好，但是还是走出去了，坚持到了大学，但是那些压力也给我自己造成了许多的心里创伤。 未来&emsp;&emsp; 高中应该是对于学生来说最美好的时段，同时也是最有价值的时段，但是不幸，我没有完全融入那段生活，但是多多少少也有点高中时期的美好，现在还是挺怀恋的，但是更多的是遗憾。但是到了大学，自由、放纵占据了生活，终于不用整天去面对繁重的书本，沉重的压力去学习，从来没有想过该去做些有价值的事情，将时间投入到什么地方。直到大三开始，才开始真正的思考，工作、就业的问题，才开始思考我未来需要的是什么，在哪里，当我走出校园的那一刻，我是以什么样的角色去立足于这个社会，甚至在毕业几年后自己何去何从，那个时候开始就自己的专业方向开始定位自己的角色，但是不幸，对社会认知理念太少，稀里糊涂的选择程序员的某个方向，直到今天，才开始重新定位自己、审视自己 &emsp;&emsp; 在学生时期很内向，脾气怪异，甚至是孤僻，社交活动很少，甚至不明白还有人心叵测这一说，现在回看，发现自己处于自己的内心时间，挥霍了太多青春，同时也失去了太多的改变自己的机遇。大学毕业的这一年，我也挥霍了一次青春，这是我最后悔的一次挥霍，这一次让我深深的需要深刻的反省自己，才让我进入那早该进入的性格改变期，改变自己挥霍时间、挥霍青春的性格，改变自己高傲、孤僻的性格，这一刻，认识到，真的需要踏出去了，能力很重要。 自省自省&emsp;&emsp;认识自己的问题才能更好的解决问题。反思自己现在的态度与行为，是否有积极主动的学？抱着什么样的念头去学？是否还在用别人的标准来衡量自己？是否还在为鸡毛蒜皮的是烦恼，不知轻重？ &emsp;&emsp;当今天重新审视自己的问题的时候，发现确确实实的存在这些问题，漫无目的的学，没有规划性的学习，内心强大的攀比心理，经常不知事情轻重。这一刻才明白体会到自律与自控力的重要，优秀需要一点点的积累，无法一步青云，术业有专攻。 读书&emsp;&emsp;现在每天都有读书的习惯，目前所看的书有技术方向、软技能方面的书，但是在读过一本书之后，是否有真正的理解书本的技巧，是否真的的有自己的理解，这也是开始写博客的初衷之一，只有记录，才能明白自己从读书里面真正的学到了什么，理解了什么。 写作&emsp;&emsp;开始这篇博客，就需要时刻记录自己的成长。写作需要深度思考，对文字的灵活运用能力，甚至在职场中，写作仍然是一种非常重要的能力。程序员的技术性文档，源码阅读后的深思理解记录，软件使用文档，技术书籍的读后感。 社交&emsp;&emsp;直到准备写这个地方的时候，才在深深的思考，社交是什么，甚至是询问自己，你有社交能力吗？社交需要走出去，用心去聆听，用心去体会，甚至是用心的去交流，情绪与性格会影响社交能力，需要调整心情，转变性格，平易近人。 锻炼&emsp;&emsp;成功需要身体作为基础，不然真的可能最后学习的内容是颈椎病康复指南，久坐的人一般都是出于亚健康状态，每周三两次锻炼或者周末骑行都是锻炼的一种方式。 技术方向&emsp;&emsp;省视自己过往二十几年的时间，最后悔的就是技术问题，很后悔在大学期间没有认真学好数学与计算机相关的理论知识，甚至是没有一门精通性的语言。大学主要课程语言是C/C++，大学的放纵，让我成功的避过了学好这些课程最好的时机，现在只能回头恶补，每一门技术方向，基础或许很简单，但是开始深入学习所选择的技术方向的时候，需要询问自己基础是否融会贯通。技术方向固然很重要，但是基础是技术的基石，根基不稳，技术也不会理解太通彻。 英语&emsp;&emsp;英语是现在头疼的一点，当真正省视技术方向时，发现大多的文档都是英语文档，甚至现在很多前沿技术性的文档也是英语文档，或许可以等待翻译，但是翻译周期长，甚至翻译的文档往往带有翻译者的个人看法在里面，同一篇文章，十个人读有十种不同的感悟。背单词、听、说、读、写，现在将这些所谓的后悔转变成现在去学习的动力，开启自己计划学习。 &emsp;&emsp;今天，在这里记录下自己对过往的总结，对现如今生活的不满意，接下来，就该用自己的整个人生去为自己拼搏，相信总会有成功的一天。]]></content>
      <categories>
        <category>记录</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>记录</tag>
      </tags>
  </entry>
</search>